@using ECommerceCore.Application.Contracts.ViewModels
@using ECommerceCore.Domain.Entities
@model ProductIndexVM
@{
    ViewData["Title"] = "Product Inventory";
    // var categories = ViewBag.Categories as IEnumerable<Category>;
}
<link href="~/css/product/product.css" rel="stylesheet" />

<!-- Add a hidden form to include the anti-forgery token -->
<form id="antiForgeryForm" method="post" style="display: none;">
    @Html.AntiForgeryToken()
</form>

<div class="product-management-container">
    <!-- Card Header with Glass Effect -->
    <div class="card-header glass-header">
        <div class="header-content">
            <div class="title-section">
                <i class="fas fa-box-open"></i>
                <h2>Product Inventory</h2>
                <span class="badge product-count" id="totalCount">0 items</span>
            </div>
            <div class="action-section">
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" id="productSearch" placeholder="Search products...">
                </div>
                <a asp-controller="Product" asp-action="Upsert" class="btn btn-primary btn-add">
                    <i class="bi bi-plus-circle-dotted"></i> Add Product
                </a>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="filters-section">
        <div class="filter-group">
            <label>Category</label>
            <select class="form-select" id="categoryFilter">
                <option value="">All Categories</option>
                @foreach (var category in Model.Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
        <div class="filter-group">
            <label>Stock Status</label>
            <select class="form-select" id="stockFilter">
                <option value="">All Status</option>
                <option value="in-stock">In Stock</option>
                <option value="low-stock">Low Stock</option>
                <option value="out-of-stock">Out of Stock</option>
            </select>
        </div>
        <div class="filter-group">
            <label>Sort By</label>
            <select class="form-select" id="sortBy">
                <option value="title-asc">Name (A-Z)</option>
                <option value="title-desc">Name (Z-A)</option>
                <option value="price-asc">Price (Low-High)</option>
                <option value="price-desc">Price (High-Low)</option>
                <option value="author-asc">Author (A-Z)</option>
                <option value="author-desc">Author (Z-A)</option>
            </select>
        </div>
        <button id="resetFilters" class="btn btn-outline-secondary">
            <i class="fas fa-sync-alt"></i> Reset
        </button>
    </div>


    @*    @if (!Model.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-box-open"></i>
            </div>
            <h3>No Products Found</h3>
            <p>Your product inventory is empty. Click the button below to add your first product.</p>
            <a asp-controller="Product" asp-action="Upsert" class="btn btn-primary">
                <i class="bi bi-plus-circle-dotted"></i> Add Product
            </a>
        </div>
    }
    else
    { *@
    <!-- Products Table -->
    <div class="table-responsive">
        <table class="products-table">
            <thead>
                <tr>
                    <th class="sortable" data-sort="title">
                        <span>Product</span>
                        <i class="fas fa-sort"></i>
                    </th>
                    <th class="sortable" data-sort="isbn">
                        <span>ISBN</span>
                        <i class="fas fa-sort"></i>
                    </th>
                    <th class="sortable numeric" data-sort="price">
                        <span>Price</span>
                        <i class="fas fa-sort"></i>
                    </th>
                    <th class="sortable" data-sort="author">
                        <span>Author</span>
                        <i class="fas fa-sort"></i>
                    </th>
                    <th>Category</th>
                    @* <th class="sortable numeric" data-sort="stock"> *@
                    @*     <span>Stock</span> *@
                    @*     <i class="fas fa-sort"></i> *@
                    @* </th> *@
                    <th>Actions</th>
                </tr>
            </thead>
            @* <tbody> *@
            @*     @foreach (var product in Model) *@
            @*     { *@
            @*         <tr class="product-row" *@
            @*             data-title="@product.Title.ToLower()" *@
            @*             data-category="@product.Category.Name" *@
            @* @*             data-stock="@product.StockQuantity" *@ 
            @*             data-price="@product.ListPrice"> *@
            @*             <td class="product-info"> *@
            @*                 <div class="product-image"> *@
            @*                     <img src="@(product.ProductImages?.FirstOrDefault()?.ImageUrl ?? "/images/default-product.png")" alt="@product.Title"> *@
            @*                 </div> *@
            @*                 <div class="product-details"> *@
            @*                     <h4>@product.Title</h4> *@
            @*                     @{ *@
            @*                         string idString = product.Id.ToString(); *@
            @*                         string displayId = idString.Length >= 8 ? idString.Substring(0, 8) : idString; *@
            @*                     } *@
            @*                     <small>SKU: @displayId</small> *@
            @*                 @*     <small>SKU: @product.Id.ToString().Substring(0, 8)</small> *@ 
            @*                 </div> *@
            @*             </td> *@
            @*             <td>@product.ISBN</td> *@
            @*             <td class="price">$@product.ListPrice.ToString("N2")</td> *@
            @*             <td>@product.Author</td> *@
            @*             <td> *@
            @*                 <span class="category-badge">@product.Category.Name</span> *@
            @*             </td> *@
            @*            @*  <td> *@
            @*                 <span class="stock-badge @(product.StockQuantity > 10 ? "in-stock" : *@
            @*                     product.StockQuantity > 0 ? "low-stock" : "out-of-stock")"> *@
            @*                     @product.StockQuantity *@
            @*                 </span> *@
            @*             </td> *@ 
            @*             <td class="actions"> *@
            @*                 <div class="action-buttons"> *@
            @*                     <a asp-controller="Product" asp-action="Upsert" asp-route-id="@product.Id" *@
            @*                        class="btn-action btn-edit" title="Edit"> *@
            @*                         <i class="bi bi-pencil-square"></i> *@
            @*                     </a> *@
            @*                     <a asp-controller="Product" asp-action="Details" asp-route-id="@product.Id" *@
            @*                        class="btn-action btn-view" title="View"> *@
            @*                         <i class="bi bi-eye"></i> *@
            @*                     </a> *@
            @*                     <button class="btn-action btn-delete" title="Delete" *@
            @*                             onclick="deleteProduct('@product.Id', '@product.Title')"> *@
            @*                         <i class="bi bi-trash"></i> *@
            @*                     </button> *@
            @*                 </div> *@
            @*             </td> *@
            @*         </tr> *@
            @*     } *@
            @* </tbody> *@
            <tbody id="productsTableBody">
                <!-- Will be populated by JavaScript -->
            </tbody>
        </table>
    </div>

    <!-- Loading Indicator -->
    <div id="loadingIndicator" class="text-center py-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <!-- Empty State (hidden by default) -->
    <div id="emptyState" class="empty-state" style="display: none;">
        <div class="empty-icon">
            <i class="fas fa-box-open"></i>
        </div>
        <h3>No Products Found</h3>
        <p>No products match your search criteria.</p>
        <button id="resetEmptyState" class="btn btn-primary">
            <i class="fas fa-sync-alt"></i> Reset Filters
        </button>
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
        <div class="pagination-info">
            Showing <span id="showingFrom">0</span> to <span id="showingTo">0</span> of <span id="totalItems">0</span> products
        </div>
        <div class="pagination-controls">
            <button class="btn-pagination" id="prevPage" disabled>
                <i class="fas fa-chevron-left"></i>
            </button>
            <div class="page-numbers" id="pageNumbers">
                <!-- Will be filled by JavaScript -->
            </div>
            <button class="btn-pagination" id="nextPage" disabled>
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>
    @* } *@
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Configuration
            let currentPage = 1;
            const pageSize = 10;
            let currentSort = { column: 'title', direction: 'asc' };
            let totalPages = 1;
            let isLoading = false;

            // Initialize
            loadProducts();

            // Search functionality
            document.getElementById('productSearch').addEventListener('input', debounce(function(e) {
                currentPage = 1;
                loadProducts();
            }, 300));

            // Category filter
            document.getElementById('categoryFilter').addEventListener('change', function() {
                currentPage = 1;
                loadProducts();
            });

            // Stock filter
            document.getElementById('stockFilter').addEventListener('change', function() {
                currentPage = 1;
                loadProducts();
            });

            // Sort by
            document.getElementById('sortBy').addEventListener('change', function(e) {
                const [column, direction] = e.target.value.split('-');
                currentSort = { column, direction };
                currentPage = 1;
                loadProducts();
            });

            // Reset filters
            document.getElementById('resetFilters').addEventListener('click', function() {
                document.getElementById('productSearch').value = '';
                document.getElementById('categoryFilter').value = '';
                document.getElementById('stockFilter').value = '';
                document.getElementById('sortBy').value = 'title-asc';
                currentSort = { column: 'title', direction: 'asc' };
                currentPage = 1;
                loadProducts();
            });

            // Reset from empty state
            document.getElementById('resetEmptyState').addEventListener('click', function() {
                document.getElementById('productSearch').value = '';
                document.getElementById('categoryFilter').value = '';
                document.getElementById('stockFilter').value = '';
                document.getElementById('sortBy').value = 'title-asc';
                currentSort = { column: 'title', direction: 'asc' };
                currentPage = 1;
                loadProducts();
            });

            // Sortable headers
            document.querySelectorAll('.sortable').forEach(header => {
                header.addEventListener('click', function() {
                    const column = this.dataset.sort;
                    let direction = 'asc';

                    if (this.classList.contains('active')) {
                        direction = this.classList.contains('asc') ? 'desc' : 'asc';
                    }

                    // Update UI
                    document.querySelectorAll('.sortable').forEach(h => {
                        h.classList.remove('active', 'asc', 'desc');
                    });

                    this.classList.add('active', direction);

                    // Update sort dropdown to match
                    document.getElementById('sortBy').value = `${column}-${direction}`;

                    // Update sort and reload
                    currentSort = { column, direction };
                    currentPage = 1;
                    loadProducts();
                });
            });

            // Pagination controls
            document.getElementById('prevPage').addEventListener('click', function() {
                if (currentPage > 1) {
                    currentPage--;
                    loadProducts();
                }
            });

            document.getElementById('nextPage').addEventListener('click', function() {
                if (currentPage < totalPages) {
                    currentPage++;
                    loadProducts();
                }
            });

            // Load products from server
            function loadProducts() {
                if (isLoading) return;

                isLoading = true;
                showLoading(true);

                // Prepare query parameters
                const queryParams = {
                    pageNumber: currentPage,
                    pageSize: pageSize,
                    searchTerm: document.getElementById('productSearch').value,
                    sortColumn: currentSort.column,
                    sortDirection: currentSort.direction,
                    categoryId: document.getElementById('categoryFilter').value || null,
                    stockStatus: document.getElementById('stockFilter').value || null
                };

                // Remove null parameters
                Object.keys(queryParams).forEach(key => {
                    if (queryParams[key] === null || queryParams[key] === '') {
                        delete queryParams[key];
                    }
                });

                // Make AJAX request
                fetch('/admin/product/getproducts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(queryParams)
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    console.log(response, "res");
                    return response.json();
                })
                .then(data => {
                    console.log(data, "data");
                    renderProducts(data.items);
                    updatePagination(data.totalCount);
                    updateCounts(data.totalCount, data.items.length);
                    isLoading = false;
                    showLoading(false);

                    // Show empty state if no products
                    if (data.items.length === 0) {
                        document.getElementById('emptyState').style.display = 'block';
                    } else {
                        document.getElementById('emptyState').style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    isLoading = false;
                    showLoading(false);
                    Swal.fire(
                        'Error!',
                        'There was a problem loading products.',
                        'error'
                    );
                });
            }

            // Render products to table
            function renderProducts(products) {
                const tbody = document.getElementById('productsTableBody');
                tbody.innerHTML = '';

                products.forEach(product => {
                    const tr = document.createElement('tr');
                    tr.className = 'product-row';

                    const sku = product.isbn;

                    // Get first product image or use default
                    const productImage = product.productImages && product.productImages.length > 0 ?
                        product.productImages[0].imageUrl : '/images/default-product.png';

                    tr.innerHTML = `
                        <td class="product-info">
                            <div class="product-image">
                                <img src="${productImage}" alt="${product.title}">
                            </div>
                            <div class="product-details">
                                <h4>${product.title}</h4>
                                <small>SKU: ${sku}</small>
                            </div>
                        </td>
                        <td>${product.isbn}</td>
                        <td class="price">$${product.listPrice.toFixed(2)}</td>
                        <td>${product.author}</td>
                        <td>
                            <span class="category-badge">${product.category.name}</span>
                        </td>
                        <td class="actions">
                            <div class="action-buttons">
                                <a href="/admin/product/upsert?id=${product.id}"
                                   class="btn-action btn-edit" title="Edit">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                <a href="/admin/product/details?id=${product.id}"
                                   class="btn-action btn-view" title="View">
                                    <i class="bi bi-eye"></i>
                                </a>
                                <button class="btn-action btn-delete" title="Delete"
                                        onclick="deleteProduct('${product.id}', '${product.title.replace(/'/g, "\\'")}')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </td>
                    `;

                    tbody.appendChild(tr);
                });
            }

            // Update pagination controls
            function updatePagination(totalCount) {
                totalPages = Math.ceil(totalCount / pageSize);
                const pageNumbers = document.getElementById('pageNumbers');
                pageNumbers.innerHTML = '';

                // Always show first page
                addPageButton(1);

                // Show ellipsis if needed before current page
                if (currentPage > 3) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'page-ellipsis';
                    ellipsis.textContent = '...';
                    pageNumbers.appendChild(ellipsis);
                }

                // Show current page and neighbors
                for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {
                    addPageButton(i);
                }

                // Show ellipsis if needed after current page
                if (currentPage < totalPages - 2) {
                    const ellipsis = document.createElement('span');
                    ellipsis.className = 'page-ellipsis';
                    ellipsis.textContent = '...';
                    pageNumbers.appendChild(ellipsis);
                }

                // Always show last page if there's more than one page
                if (totalPages > 1) {
                    addPageButton(totalPages);
                }

                // Update button states
                document.getElementById('prevPage').disabled = currentPage === 1;
                document.getElementById('nextPage').disabled = currentPage === totalPages;

                // Update total count
                document.getElementById('totalCount').textContent = `${totalCount} items`;
            }

            // Helper to add page button
            function addPageButton(page) {
                const pageBtn = document.createElement('button');
                pageBtn.className = 'page-number' + (page === currentPage ? ' active' : '');
                pageBtn.textContent = page;
                pageBtn.addEventListener('click', function() {
                    if (currentPage !== page) {
                        currentPage = page;
                        loadProducts();
                    }
                });
                document.getElementById('pageNumbers').appendChild(pageBtn);
            }

            // Update showing X to Y of Z
            function updateCounts(totalCount, currentCount) {
                const from = ((currentPage - 1) * pageSize) + 1;
                const to = from + currentCount - 1;

                document.getElementById('showingFrom').textContent = from;
                document.getElementById('showingTo').textContent = to;
                document.getElementById('totalItems').textContent = totalCount;
            }

            // Show/hide loading indicator
            function showLoading(show) {
                document.getElementById('loadingIndicator').style.display = show ? 'block' : 'none';
            }

            // Debounce function to limit how often a function is called
            function debounce(func, wait) {
                let timeout;
                return function() {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                        func.apply(context, args);
                    }, wait);
                };
            }
        });

        function deleteProduct(id, title) {
            Swal.fire({
                title: 'Delete Product?',
                html: `Are you sure you want to delete <strong>${title}</strong>? This action cannot be undone.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel',
                reverseButtons: true,
                backdrop: `
                    rgba(0,0,0,0.4)
                    url("/images/trash-icon-animated.gif")
                    left top
                    no-repeat
                `
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/product/delete/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                        throw new Error('Network response was not ok.');
                    })
                    .then(data => {
                        // Reload products to reflect deletion
                        document.dispatchEvent(new Event('DOMContentLoaded'));

                        // Show success message
                        Swal.fire(
                            'Deleted!',
                            'The product has been deleted.',
                            'success'
                        );
                    })
                    .catch(error => {
                        Swal.fire(
                            'Error!',
                            'There was a problem deleting the product.',
                            'error'
                        );
                        console.error('Error:', error);
                    });
                }
            });
        }
    </script>
}