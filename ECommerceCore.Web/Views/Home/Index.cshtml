@using ECommerceCore.Domain.Entities
@* @using ECommerceCore.Domain.Models.Entities
@model IEnumerable<Product>

<div class="row pb-3">
    @foreach (var product in Model)
    {
        <div class="col-lg-3 col-sm-6">
            <div class="row p-2">
                <div class="col-12 p-1">
                    <div class="card border-0 p-3 shadow border-top border-5 rounded">
                        @if (product.ProductImages != null && product.ProductImages.Count() > 0)
                        {
                            <img src="@product.ProductImages.FirstOrDefault().ImageUrl" class="card-img-top rounded" />
                        }
                        else
                        {
                            <img src="https://placehold.co/500x600/png" class="card-img-top rounded" />
                        }
                        <div class="card-body pb-0">
                            <div class="pl-1">
                                <p class="card-title h5 text-dark opacity-75 text-uppercase text-center">@product.Title</p>
                                <p class="card-title text-warning text-center">by <b>@product.Author</b></p>
                            </div>
                            <div class="pl-1">
                                <p class="text-dark text-opacity-75 text-center mb-0">
                                    List Price:
                                    <span class="text-decoration-line-through">
                                        @product.ListPrice.ToString("c")
                                    </span>
                                </p>
                            </div>
                            <div class="pl-1">
                                <p class="text-dark text-opacity-75 text-center mb-0">
                                    As low as:
                                    <span>
                                        @product.Price100.ToString("c")
                                    </span>
                                </p>
                            </div>

                        </div>
                        <a asp-action="Details" asp-route-productId="@product.Id" class="btn btn-primary bg-gradient border-0 form-control">
                            Details
                        </a>
                    </div>

                </div>
            </div>

        </div>
    }

</div> *@

@model IEnumerable<Product>

<div class="container py-5">
    <div class="row">
        @foreach (var product in Model)
        {
            <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                <div class="card shadow-sm border-0 rounded-lg position-relative">
                    <!-- Badge for New Arrival or Discount -->
                    <span class="badge bg-success position-absolute top-0 start-0 m-2">New</span>

                    <!-- Product Image -->
                    <div class="image-container">
                        @if (product.ProductImages != null && product.ProductImages.Count() > 0)
                        {
                            <img src="@product.ProductImages.FirstOrDefault().ImageUrl" alt="@product.Title" class="card-img-top rounded-top img-fluid" />
                        }
                        else
                        {
                            <img src="https://placehold.co/500x600/png" alt="Placeholder Image" class="card-img-top rounded-top img-fluid" />
                        }
                    </div>

                    <div class="card-body text-center">
                        <!-- Title -->
                        <h5 class="card-title text-uppercase fw-bold text-truncate">@product.Title</h5>
                        <p class="card-text text-muted mb-1">by <span class="text-warning fw-semibold">@product.Description</span></p>

                        <!-- Price Section -->
                        <div class="d-flex justify-content-center align-items-center gap-2 mb-3">
                            <span class="text-muted text-decoration-line-through">@product.Price.ToString("c")</span>
                            <span class="text-success fw-bold">@product.Price.ToString("c")</span>
                        </div>

                        <!-- Star Ratings -->
                        <div class="mb-3">
                            <i class="bi bi-star-fill text-warning"></i>
                            <i class="bi bi-star-fill text-warning"></i>
                            <i class="bi bi-star-fill text-warning"></i>
                            <i class="bi bi-star-fill text-warning"></i>
                            <i class="bi bi-star-half text-warning"></i>
                            <span class="text-muted">(4.5)</span>
                        </div>

                        <!-- Action Buttons -->
                        <a asp-action="Details" asp-route-productId="@product.Id" class="btn btn-primary btn-sm w-100 rounded-pill">
                            View Details
                        </a>
                        @Html.AntiForgeryToken()
                        <button class="btn btn-outline-secondary btn-sm w-100 rounded-pill mt-2 add-to-wishlist" data-product-id="@product.Id">
                            <i class="bi bi-heart-fill text-danger me-2"></i>Add to Wishlist
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {

              // Check local storage for added products and update button states
            $(".add-to-wishlist").each(function() {
                const productId = $(this).data("product-id");
                const wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
                 if (wishlist.includes(productId)) {
                    $(this)
                        .html('<i class="bi bi-heart-fill text-danger me-2"></i>Added to Wishlist')
                        .addClass("btn-success")
                        .removeClass("btn-outline-secondary");
                 }
            });

            $(".add-to-wishlist").on("click", function (e) {
                e.preventDefault(); // Prevent default button action

                const productId = $(this).data("product-id");

                const button = $(this); // Reference to the clicked button

                $.ajax({
                    url: '/Wishlist/AddToWishlist',
                    type: 'POST',
                    data: { productId: productId },
                    headers: {
                        'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val() // Include CSRF token
                    },
                    success: function (response) {
                        if (response.success) {
                             // Change button text and icon for the clicked button
                             button
                                .html('<i class="bi bi-heart-fill text-danger me-2"></i>Added to Wishlist')
                                .addClass("btn-success")
                                .removeClass("btn-outline-secondary");

                          // Update local storage
                          let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
                          if (!wishlist.includes(productId)) {
                             wishlist.push(productId);
                          }
                          localStorage.setItem('wishlist', JSON.stringify(wishlist));

                         // Display success notification using SweetAlert
                           Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: response.message || "Product added to your wishlist!",
                                background: '#f8f9fa',
                                iconColor: '#28a745',
                                customClass: {
                                    title: 'text-success',
                                    popup: 'swal-popup',
                                },
                                showConfirmButton: false,
                                timer: 2000,
                                position: 'center',
                            });
                        } else {
                              // Display warning notification using SweetAlert
                                Swal.fire({
                                icon: 'warning',
                                title: 'Oops!',
                                text: response.message || "Failed to add item to wishlist.",
                                background: '#fff3cd',
                                iconColor: '#856404',
                                customClass: {
                                    title: 'text-warning',
                                    popup: 'swal-popup',
                                },
                                showConfirmButton: false,
                                timer: 2000,
                                position: 'center',
                            });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        // Check for unauthorized response in the error callback as well
                        if (jqXHR.status === 401) {
                          Swal.fire({
                            icon: 'error',
                            title: 'Oops!',
                            text: "You need to be logged in to add items to your wishlist.",
                            background: '#f8d7da',
                            iconColor: '#dc3545',
                            customClass: {
                              title: 'text-danger',
                              popup: 'swal-popup',
                            },
                            showConfirmButton: true, // Allow user to take action (e.g., login)
                          });
                        } else {
                          // Display a more generic error message for other errors
                          Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: "An error occurred while adding the item to the wishlist.",
                            background: '#f8d7da',
                            iconColor: '#dc3545',
                            customClass: {
                              title: 'text-danger',
                              popup: 'swal-popup',
                            },
                            showConfirmButton: false,
                            timer: 2000,
                            position: 'center',
                          });
                        }
                    }
                });
            });
        });
    </script>
}

<style>
    /* Ensure consistent image sizes */
    .image-container {
        width: 100%;
        height: 350px; /* Set a fixed height for all images */
        overflow: hidden;
        border-bottom: 1px solid #ddd;
    }

        .image-container img {
            width: 100%;
            height: 100%;
            object-fit: cover; /* Maintain aspect ratio while filling the container */
        }

    .hover-zoom {
        transition: transform 0.3s ease-in-out;
    }

        .hover-zoom:hover {
            transform: scale(1.05);
        }

    .badge {
        font-size: 0.8rem;
        padding: 0.4rem 0.7rem;
    }

    .card {
        transition: box-shadow 0.3s ease, transform 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
            transform: translateY(-5px);
        }

    .card-title {
        font-size: 1.1rem;
    }

    .btn {
        transition: all 0.3s ease-in-out;
    }

        .btn:hover {
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }
    /* Custom SweetAlert popup styles */
    .swal-popup {
        border-radius: 15px; /* Round edges */
        box-shadow: 0 4px 25px rgba(0, 0, 0, 0.2); /* Subtle shadow */
    }

        .swal-popup .swal2-title {
            font-size: 1.5rem; /* Increase font size for title */
            font-weight: bold; /* Make the title bold */
        }

        .swal-popup .swal2-html {
            font-size: 1rem; /* Customize the size of the message */
            color: #555; /* Darker text color */
        }

        /* Customize button appearance if you use buttons */
        .swal-popup .swal2-confirm {
            background-color: #007bff; /* Blue background for buttons */
            color: #fff; /* White text */
            border-radius: 5px; /* Rounded corners for buttons */
        }

</style>

