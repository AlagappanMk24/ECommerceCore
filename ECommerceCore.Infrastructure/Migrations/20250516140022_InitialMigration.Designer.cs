// <auto-generated />
using System;
using ECommerceCore.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceCore.Infrastructure.Migrations
{
    [DbContext(typeof(EcomDbContext))]
    [Migration("20250516140022_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceCore.Domain.Entities.AuthState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailOTP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PasswordVerified")
                        .HasColumnType("bit");

                    b.Property<string>("SmsOTP")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("UserId");

                    b.ToTable("AuthStates");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.AuthToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstablishedYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "United States",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(158),
                            Description = "Innovative technology solutions for everyday life.",
                            EstablishedYear = 2005,
                            IsActive = true,
                            IsDeleted = false,
                            LogoUrl = "/images/brands/tech-solutions-logo.png",
                            Name = "Tech Solutions",
                            Slug = "tech-solutions",
                            WebsiteUrl = "https://www.techsolutions.com"
                        },
                        new
                        {
                            Id = 2,
                            Country = "France",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(169),
                            Description = "Trendy and comfortable clothing for all occasions.",
                            EstablishedYear = 2010,
                            IsActive = true,
                            IsDeleted = false,
                            LogoUrl = "/images/brands/fashion-forward-logo.png",
                            Name = "Fashion Forward",
                            Slug = "fashion-forward",
                            WebsiteUrl = "https://www.fashionforward.com"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Canada",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(172),
                            Description = "Eco-friendly products for sustainable living.",
                            EstablishedYear = 2015,
                            IsActive = true,
                            IsDeleted = false,
                            LogoUrl = "/images/brands/green-living-logo.png",
                            Name = "Green Living",
                            Slug = "green-living",
                            WebsiteUrl = "https://www.greenliving.com"
                        },
                        new
                        {
                            Id = 4,
                            Country = "United Kingdom",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(174),
                            Description = "Quality books from authors around the world.",
                            EstablishedYear = 1995,
                            IsActive = true,
                            IsDeleted = false,
                            LogoUrl = "/images/brands/global-reads-logo.png",
                            Name = "Global Reads",
                            Slug = "global-reads",
                            WebsiteUrl = "https://www.globalreads.com"
                        },
                        new
                        {
                            Id = 5,
                            Country = "Australia",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(177),
                            Description = "High-quality equipment for outdoor enthusiasts.",
                            EstablishedYear = 2008,
                            IsActive = true,
                            IsDeleted = false,
                            LogoUrl = "/images/brands/adventure-gear-logo.png",
                            Name = "Adventure Gear",
                            Slug = "adventure-gear",
                            WebsiteUrl = "https://www.adventuregear.com"
                        },
                        new
                        {
                            Id = 6,
                            Country = "South Korea",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(180),
                            Description = "Premium beauty products for radiant skin.",
                            EstablishedYear = 2012,
                            IsActive = true,
                            IsDeleted = false,
                            LogoUrl = "/images/brands/glow-and-glam-logo.png",
                            Name = "Glow & Glam",
                            Slug = "glow-and-glam",
                            WebsiteUrl = "https://www.glowandglam.com"
                        },
                        new
                        {
                            Id = 7,
                            Country = "Germany",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(181),
                            Description = "Creative and educational toys for children of all ages.",
                            EstablishedYear = 2000,
                            IsActive = true,
                            IsDeleted = false,
                            LogoUrl = "/images/brands/fun-time-toys-logo.png",
                            Name = "Fun Time Toys",
                            Slug = "fun-time-toys",
                            WebsiteUrl = "https://www.funtimetoys.com"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(483),
                            Description = "Explore the latest gadgets and electronic devices.",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(487),
                            Description = "Discover stylish clothing and accessories for all occasions.",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Apparel"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(489),
                            Description = "Find everything you need for your home and outdoor spaces.",
                            DisplayOrder = 3,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Home & Garden"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(491),
                            Description = "Immerse yourself in captivating stories and knowledge.",
                            DisplayOrder = 4,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(493),
                            Description = "Gear up for your active lifestyle and outdoor adventures.",
                            DisplayOrder = 5,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(495),
                            Description = "Enhance your natural beauty and well-being.",
                            DisplayOrder = 6,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Beauty & Personal Care"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(496),
                            Description = "Unleash fun and creativity for all ages.",
                            DisplayOrder = 7,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Toys & Games"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(498),
                            Description = "The latest smartphones from top brands.",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Smartphones",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(500),
                            Description = "Powerful laptops for work and play.",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Laptops",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(502),
                            Description = "High-definition televisions for home entertainment.",
                            DisplayOrder = 3,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Televisions",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(504),
                            Description = "Stylish clothing for men.",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Menswear",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(685),
                            Description = "Trendy clothing for women.",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Womenswear",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(687),
                            Description = "Essential appliances for your kitchen.",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Kitchen Appliances",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(689),
                            Description = "Tools for maintaining your garden.",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Garden Tools",
                            ParentCategoryId = 3
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(691),
                            Description = "Imaginative and engaging fictional works.",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Fiction",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(694),
                            Description = "Informative and factual books on various topics.",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Non-Fiction",
                            ParentCategoryId = 4
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(695),
                            Description = "Gear for your outdoor adventures.",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Camping & Hiking",
                            ParentCategoryId = 5
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(697),
                            Description = "Equipment and accessories for your fitness journey.",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Fitness",
                            ParentCategoryId = 5
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Silicon City",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(791),
                            IsDeleted = false,
                            Name = "Tech Solutions Inc.",
                            PhoneNumber = "555-123-4567",
                            PostalCode = "94016",
                            State = "CA",
                            StreetAddress = "123 Innovation Way"
                        },
                        new
                        {
                            Id = 2,
                            City = "Fashionville",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(797),
                            IsDeleted = false,
                            Name = "Fashion Forward Ltd.",
                            PhoneNumber = "212-987-6543",
                            PostalCode = "10001",
                            State = "NY",
                            StreetAddress = "456 Style Avenue"
                        },
                        new
                        {
                            Id = 3,
                            City = "Eco City",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(800),
                            IsDeleted = false,
                            Name = "Green Living Co.",
                            PhoneNumber = "404-555-7890",
                            PostalCode = "30303",
                            State = "GA",
                            StreetAddress = "789 Earth Street"
                        },
                        new
                        {
                            Id = 4,
                            City = "Booktown",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(801),
                            IsDeleted = false,
                            Name = "Global Reads",
                            PhoneNumber = "312-555-1122",
                            PostalCode = "60602",
                            State = "IL",
                            StreetAddress = "101 Literary Lane"
                        },
                        new
                        {
                            Id = 5,
                            City = "Outdoorsville",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(809),
                            IsDeleted = false,
                            Name = "Adventure Gear Corp.",
                            PhoneNumber = "720-555-3344",
                            PostalCode = "80202",
                            State = "CO",
                            StreetAddress = "222 Trail Road"
                        },
                        new
                        {
                            Id = 6,
                            City = "Cosmetic City",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(819),
                            IsDeleted = false,
                            Name = "Glow & Glam",
                            PhoneNumber = "310-555-0011",
                            PostalCode = "90210",
                            State = "CA",
                            StreetAddress = "333 Radiant Road"
                        },
                        new
                        {
                            Id = 7,
                            City = "Toyland",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(821),
                            IsDeleted = false,
                            Name = "Fun Time Toys",
                            PhoneNumber = "718-555-9988",
                            PostalCode = "11201",
                            State = "NY",
                            StreetAddress = "444 Playful Place"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactUsSubmissions");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "USD",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1899),
                            IsDeleted = false,
                            Name = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = 2,
                            Code = "EUR",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1902),
                            IsDeleted = false,
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = 3,
                            Code = "GBP",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1903),
                            IsDeleted = false,
                            Name = "British Pound",
                            Symbol = "£"
                        },
                        new
                        {
                            Id = 4,
                            Code = "CAD",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1905),
                            IsDeleted = false,
                            Name = "Canadian Dollar",
                            Symbol = "C$"
                        },
                        new
                        {
                            Id = 5,
                            Code = "AUD",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1906),
                            IsDeleted = false,
                            Name = "Australian Dollar",
                            Symbol = "A$"
                        },
                        new
                        {
                            Id = 6,
                            Code = "JPY",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1907),
                            IsDeleted = false,
                            Name = "Japanese Yen",
                            Symbol = "¥"
                        },
                        new
                        {
                            Id = 7,
                            Code = "INR",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1908),
                            IsDeleted = false,
                            Name = "Indian Rupee",
                            Symbol = "₹"
                        },
                        new
                        {
                            Id = 8,
                            Code = "CHF",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1910),
                            IsDeleted = false,
                            Name = "Swiss Franc",
                            Symbol = "Fr"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2128),
                            Email = "john.doe@example.com",
                            IsDeleted = false,
                            Name = "John Doe",
                            PhoneNumber = "555-0101"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2132),
                            Email = "jane.smith@example.com",
                            IsDeleted = false,
                            Name = "Jane Smith",
                            PhoneNumber = "555-0102"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2134),
                            Email = "hiroshi.tanaka@example.com",
                            IsDeleted = false,
                            Name = "Hiroshi Tanaka",
                            PhoneNumber = "555-0103"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 5,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2135),
                            Email = "emma.brown@example.com",
                            IsDeleted = false,
                            Name = "Emma Brown",
                            PhoneNumber = "555-0104"
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 6,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2138),
                            Email = "liam.johnson@example.com",
                            IsDeleted = false,
                            Name = "Liam Johnson",
                            PhoneNumber = "555-0105"
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 7,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2139),
                            Email = "sophie.martin@example.com",
                            IsDeleted = false,
                            Name = "Sophie Martin",
                            PhoneNumber = "555-0106"
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 4,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2140),
                            Email = "arjun.patel@example.com",
                            IsDeleted = false,
                            Name = "Arjun Patel",
                            PhoneNumber = "555-0107"
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2142),
                            Email = "clara.fischer@example.com",
                            IsDeleted = false,
                            Name = "Clara Fischer",
                            PhoneNumber = "555-0108"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId1")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDue")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecurringInvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyId1");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4423),
                            CustomerId = 1,
                            Discount = 0m,
                            ExternalReference = "REF-001",
                            InvoiceNumber = "INV-2025-001",
                            InvoiceType = 0,
                            IsDeleted = false,
                            IssueDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 1,
                            Notes = "Thank you for your purchase!",
                            OrderId = 1,
                            PONumber = "PO-001",
                            PaidAmount = 721.99m,
                            PaymentDue = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Credit Card",
                            PaymentTerms = "Net 30",
                            ShippingAmount = 20.00m,
                            Status = 3,
                            Subtotal = 649.99m,
                            Tax = 52.00m,
                            TotalAmount = 721.99m
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4443),
                            CustomerId = 2,
                            Discount = 10.00m,
                            ExternalReference = "REF-002",
                            InvoiceNumber = "INV-2025-002",
                            InvoiceType = 0,
                            IsDeleted = false,
                            IssueDate = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 2,
                            Notes = "Please pay by due date.",
                            OrderId = 2,
                            PONumber = "PO-002",
                            PaidAmount = 0m,
                            PaymentDue = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Bank Transfer",
                            PaymentTerms = "Net 30",
                            ShippingAmount = 15.00m,
                            Status = 1,
                            Subtotal = 129.99m,
                            Tax = 10.40m,
                            TotalAmount = 145.39m
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4450),
                            CustomerId = 3,
                            Discount = 0m,
                            ExternalReference = "REF-003",
                            InvoiceNumber = "INV-2025-003",
                            InvoiceType = 2,
                            IsDeleted = false,
                            IssueDate = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 1,
                            Notes = "Proforma invoice for approval.",
                            OrderId = 3,
                            PONumber = "PO-003",
                            PaidAmount = 888.99m,
                            PaymentDue = new DateTime(2025, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Credit Card",
                            PaymentTerms = "Net 30",
                            ShippingAmount = 25.00m,
                            Status = 3,
                            Subtotal = 799.99m,
                            Tax = 64.00m,
                            TotalAmount = 888.99m
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 5,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4456),
                            CustomerId = 4,
                            Discount = 0m,
                            ExternalReference = "REF-004",
                            InvoiceNumber = "INV-2025-004",
                            InvoiceType = 0,
                            IsDeleted = false,
                            IssueDate = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 5,
                            Notes = "Partial payment received.",
                            OrderId = 4,
                            PONumber = "PO-004",
                            PaidAmount = 50.00m,
                            PaymentDue = new DateTime(2025, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Bank Transfer",
                            PaymentTerms = "Net 30",
                            ShippingAmount = 10.00m,
                            Status = 2,
                            Subtotal = 109.95m,
                            Tax = 8.80m,
                            TotalAmount = 128.75m
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 6,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4523),
                            CustomerId = 5,
                            Discount = 0m,
                            ExternalReference = "REF-005",
                            InvoiceNumber = "INV-2025-005",
                            InvoiceType = 1,
                            IsDeleted = false,
                            IssueDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 6,
                            Notes = "Recurring invoice for monthly subscription.",
                            OrderId = 5,
                            PONumber = "PO-005",
                            PaidAmount = 0m,
                            PaymentDue = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Direct Debit",
                            PaymentTerms = "Net 30",
                            ShippingAmount = 0m,
                            Status = 0,
                            Subtotal = 75.99m,
                            Tax = 6.08m,
                            TotalAmount = 82.07m
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 7,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4530),
                            CustomerId = 6,
                            Discount = 0m,
                            ExternalReference = "REF-006",
                            InvoiceNumber = "INV-2025-006",
                            InvoiceType = 0,
                            IsDeleted = false,
                            IssueDate = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 7,
                            Notes = "Payment overdue, please settle ASAP.",
                            OrderId = 6,
                            PONumber = "PO-006",
                            PaidAmount = 0m,
                            PaymentDue = new DateTime(2025, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Credit Card",
                            PaymentTerms = "Net 30",
                            ShippingAmount = 8.00m,
                            Status = 4,
                            Subtotal = 69.99m,
                            Tax = 5.60m,
                            TotalAmount = 83.59m
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 4,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4538),
                            CustomerId = 7,
                            Discount = 0m,
                            ExternalReference = "REF-007",
                            InvoiceNumber = "INV-2025-007",
                            InvoiceType = 3,
                            IsDeleted = false,
                            IssueDate = new DateTime(2025, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 4,
                            Notes = "Credit note for returned item.",
                            OrderId = 7,
                            PONumber = "PO-007",
                            PaidAmount = -17.27m,
                            PaymentDue = new DateTime(2025, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Refund",
                            PaymentTerms = "Immediate",
                            ShippingAmount = 0m,
                            Status = 3,
                            Subtotal = -15.99m,
                            Tax = -1.28m,
                            TotalAmount = -17.27m
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4544),
                            CustomerId = 8,
                            Discount = 0m,
                            ExternalReference = "REF-008",
                            InvoiceNumber = "INV-2025-008",
                            InvoiceType = 0,
                            IsDeleted = false,
                            IssueDate = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 8,
                            Notes = "Invoice for recent purchase.",
                            OrderId = 8,
                            PONumber = "PO-008",
                            PaidAmount = 0m,
                            PaymentDue = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Bank Transfer",
                            PaymentTerms = "Net 30",
                            ShippingAmount = 15.00m,
                            Status = 1,
                            Subtotal = 149.99m,
                            Tax = 12.00m,
                            TotalAmount = 176.99m
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.InvoiceAttachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceAttachments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttachmentContent = "/files/invoices/INV-2025-001.pdf",
                            AttachmentName = "Invoice_INV-2025-001.pdf",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4701),
                            InvoiceId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            AttachmentContent = "/files/invoices/INV-2025-002.pdf",
                            AttachmentName = "Invoice_INV-2025-002.pdf",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4704),
                            InvoiceId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            AttachmentContent = "/files/invoices/INV-2025-003.pdf",
                            AttachmentName = "Invoice_INV-2025-003.pdf",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4705),
                            InvoiceId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            AttachmentContent = "/files/invoices/INV-2025-004.pdf",
                            AttachmentName = "Invoice_INV-2025-004.pdf",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4706),
                            InvoiceId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            AttachmentContent = "/files/invoices/INV-2025-005.pdf",
                            AttachmentName = "Invoice_INV-2025-005.pdf",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4708),
                            InvoiceId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            AttachmentContent = "/files/invoices/INV-2025-006.pdf",
                            AttachmentName = "Invoice_INV-2025-006.pdf",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4709),
                            InvoiceId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            AttachmentContent = "/files/invoices/INV-2025-007.pdf",
                            AttachmentName = "CreditNote_INV-2025-007.pdf",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4710),
                            InvoiceId = 7,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            AttachmentContent = "/files/invoices/INV-2025-008.pdf",
                            AttachmentName = "Invoice_INV-2025-008.pdf",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4711),
                            InvoiceId = 8,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Service")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 649.99m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4614),
                            Description = "55-inch 4K Smart TV with HDR",
                            InvoiceId = 1,
                            IsDeleted = false,
                            Price = 649.99m,
                            Service = "Smart TV 55 inch",
                            Unit = "Unit"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 129.99m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4620),
                            Description = "Premium black leather handbag",
                            InvoiceId = 2,
                            IsDeleted = false,
                            Price = 129.99m,
                            Service = "Leather Handbag",
                            Unit = "Unit"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 799.99m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4623),
                            Description = "24.1MP DSLR camera with 18-55mm lens",
                            InvoiceId = 3,
                            IsDeleted = false,
                            Price = 799.99m,
                            Service = "DSLR Camera",
                            Unit = "Unit"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 109.95m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4625),
                            Description = "Waterproof hiking boots size US 9",
                            InvoiceId = 4,
                            IsDeleted = false,
                            Price = 109.95m,
                            Service = "Hiking Boots",
                            Unit = "Unit"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 75.99m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4627),
                            Description = "Anti-aging skincare collection for normal skin",
                            InvoiceId = 5,
                            IsDeleted = false,
                            Price = 75.99m,
                            Service = "Skincare Set",
                            Unit = "Unit"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 69.99m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4629),
                            Description = "Interactive learning robot for kids",
                            InvoiceId = 6,
                            IsDeleted = false,
                            Price = 69.99m,
                            Service = "Learning Robot",
                            Unit = "Unit"
                        },
                        new
                        {
                            Id = 7,
                            Amount = -15.99m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4631),
                            Description = "Credit for returned historical fiction book",
                            InvoiceId = 7,
                            IsDeleted = false,
                            Price = -15.99m,
                            Service = "Book Return",
                            Unit = "Unit"
                        },
                        new
                        {
                            Id = 8,
                            Amount = 149.99m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4634),
                            Description = "Smart home starter kit with hub and bulbs",
                            InvoiceId = 8,
                            IsDeleted = false,
                            Price = 149.99m,
                            Service = "Smart Home Kit",
                            Unit = "Unit"
                        },
                        new
                        {
                            Id = 9,
                            Amount = 49.99m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4636),
                            Description = "2-year extended warranty for Smart TV",
                            InvoiceId = 1,
                            IsDeleted = false,
                            Price = 49.99m,
                            Service = "Extended Warranty",
                            Unit = "Unit"
                        },
                        new
                        {
                            Id = 10,
                            Amount = 29.99m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4637),
                            Description = "Tripod accessory for DSLR camera",
                            InvoiceId = 3,
                            IsDeleted = false,
                            Price = 29.99m,
                            Service = "Camera Tripod",
                            Unit = "Unit"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimezoneId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TimezoneId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2713),
                            CurrencyId = 1,
                            IsDeleted = false,
                            Name = "Silicon City Office",
                            TimezoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2721),
                            CurrencyId = 1,
                            IsDeleted = false,
                            Name = "Fashionville Store",
                            TimezoneId = 1
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 3,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2723),
                            CurrencyId = 1,
                            IsDeleted = false,
                            Name = "Eco City Warehouse",
                            TimezoneId = 1
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 4,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2724),
                            CurrencyId = 3,
                            IsDeleted = false,
                            Name = "London Bookstore",
                            TimezoneId = 2
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 5,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2725),
                            CurrencyId = 5,
                            IsDeleted = false,
                            Name = "Sydney Outlet",
                            TimezoneId = 4
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 6,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2727),
                            CurrencyId = 2,
                            IsDeleted = false,
                            Name = "Paris Boutique",
                            TimezoneId = 6
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 7,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2728),
                            CurrencyId = 7,
                            IsDeleted = false,
                            Name = "Mumbai Store",
                            TimezoneId = 7
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2729),
                            CurrencyId = 8,
                            IsDeleted = false,
                            Name = "Zurich Tech Hub",
                            TimezoneId = 8
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.OrderActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Details")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("User")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId", "Timestamp");

                    b.ToTable("OrderActivityLogs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityType = 0,
                            Description = "Order placed by customer",
                            Details = "{\"CustomerId\": 1}",
                            OrderHeaderId = 1,
                            Timestamp = new DateTime(2025, 4, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "john.doe"
                        },
                        new
                        {
                            Id = 2,
                            ActivityType = 3,
                            Description = "Payment completed via CreditCard",
                            Details = "{\"Amount\": 649.99}",
                            OrderHeaderId = 1,
                            Timestamp = new DateTime(2025, 4, 1, 10, 5, 0, 0, DateTimeKind.Unspecified),
                            User = "john.doe"
                        },
                        new
                        {
                            Id = 3,
                            ActivityType = 5,
                            Description = "Order shipped via UPS",
                            Details = "{\"TrackingNumber\": \"TRK123456\"}",
                            OrderHeaderId = 1,
                            Timestamp = new DateTime(2025, 4, 3, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "system"
                        },
                        new
                        {
                            Id = 4,
                            ActivityType = 0,
                            Description = "Order placed by customer",
                            Details = "{\"CustomerId\": 2}",
                            OrderHeaderId = 2,
                            Timestamp = new DateTime(2025, 4, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "jane.smith"
                        },
                        new
                        {
                            Id = 5,
                            ActivityType = 0,
                            Description = "Order placed by customer",
                            Details = "{\"CustomerId\": 2}",
                            OrderHeaderId = 3,
                            Timestamp = new DateTime(2025, 4, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "hiroshi.tanaka"
                        },
                        new
                        {
                            Id = 6,
                            ActivityType = 3,
                            Description = "Payment completed via CreditCard",
                            Details = "{\"Amount\": 799.99}",
                            OrderHeaderId = 3,
                            Timestamp = new DateTime(2025, 4, 3, 12, 10, 0, 0, DateTimeKind.Unspecified),
                            User = "hiroshi.tanaka"
                        },
                        new
                        {
                            Id = 7,
                            ActivityType = 5,
                            Description = "Order shipped via FedEx",
                            Details = "{\"TrackingNumber\": \"TRK789012\"}",
                            OrderHeaderId = 3,
                            Timestamp = new DateTime(2025, 4, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "system"
                        },
                        new
                        {
                            Id = 8,
                            ActivityType = 0,
                            Description = "Order placed by customer",
                            Details = "{\"CustomerId\": 3}",
                            OrderHeaderId = 4,
                            Timestamp = new DateTime(2025, 4, 4, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "emma.brown"
                        },
                        new
                        {
                            Id = 9,
                            ActivityType = 3,
                            Description = "Payment completed via DebitCard",
                            Details = "{\"Amount\": 109.95}",
                            OrderHeaderId = 4,
                            Timestamp = new DateTime(2025, 4, 4, 14, 5, 0, 0, DateTimeKind.Unspecified),
                            User = "emma.brown"
                        },
                        new
                        {
                            Id = 10,
                            ActivityType = 5,
                            Description = "Order shipped via DHL",
                            Details = "{\"TrackingNumber\": \"TRK345678\"}",
                            OrderHeaderId = 4,
                            Timestamp = new DateTime(2025, 4, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "system"
                        },
                        new
                        {
                            Id = 11,
                            ActivityType = 0,
                            Description = "Order placed by customer",
                            Details = "{\"CustomerId\": 4}",
                            OrderHeaderId = 5,
                            Timestamp = new DateTime(2025, 4, 5, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "liam.johnson"
                        },
                        new
                        {
                            Id = 12,
                            ActivityType = 0,
                            Description = "Order placed by customer",
                            Details = "{\"CustomerId\": 4}",
                            OrderHeaderId = 6,
                            Timestamp = new DateTime(2025, 4, 6, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "sophie.martin"
                        },
                        new
                        {
                            Id = 13,
                            ActivityType = 3,
                            Description = "Payment completed via CreditCard",
                            Details = "{\"Amount\": 69.99}",
                            OrderHeaderId = 6,
                            Timestamp = new DateTime(2025, 4, 6, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            User = "sophie.martin"
                        },
                        new
                        {
                            Id = 14,
                            ActivityType = 5,
                            Description = "Order shipped via UPS",
                            Details = "{\"TrackingNumber\": \"TRK901234\"}",
                            OrderHeaderId = 6,
                            Timestamp = new DateTime(2025, 4, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "system"
                        },
                        new
                        {
                            Id = 15,
                            ActivityType = 0,
                            Description = "Order placed by customer",
                            Details = "{\"CustomerId\": 4}",
                            OrderHeaderId = 7,
                            Timestamp = new DateTime(2025, 4, 7, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "arjun.patel"
                        },
                        new
                        {
                            Id = 16,
                            ActivityType = 3,
                            Description = "Payment completed via DebitCard",
                            Details = "{\"Amount\": 15.99}",
                            OrderHeaderId = 7,
                            Timestamp = new DateTime(2025, 4, 7, 17, 5, 0, 0, DateTimeKind.Unspecified),
                            User = "arjun.patel"
                        },
                        new
                        {
                            Id = 17,
                            ActivityType = 5,
                            Description = "Order shipped via FedEx",
                            Details = "{\"TrackingNumber\": \"TRK567890\"}",
                            OrderHeaderId = 7,
                            Timestamp = new DateTime(2025, 4, 9, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "system"
                        },
                        new
                        {
                            Id = 18,
                            ActivityType = 0,
                            Description = "Order placed by customer",
                            Details = "{\"CustomerId\": 5}",
                            OrderHeaderId = 8,
                            Timestamp = new DateTime(2025, 4, 8, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "clara.fischer"
                        },
                        new
                        {
                            Id = 19,
                            ActivityType = 0,
                            Description = "Order placed by customer",
                            Details = "{\"CustomerId\": 6}",
                            OrderHeaderId = 9,
                            Timestamp = new DateTime(2025, 4, 8, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            User = "clara.fischer"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4230),
                            IsDeleted = false,
                            OrderHeaderId = 1,
                            Price = 649.99000000000001,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4236),
                            IsDeleted = false,
                            OrderHeaderId = 2,
                            Price = 129.99000000000001,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 3,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4237),
                            IsDeleted = false,
                            OrderHeaderId = 3,
                            Price = 799.99000000000001,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 4,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4239),
                            IsDeleted = false,
                            OrderHeaderId = 4,
                            Price = 109.95,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 5,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4240),
                            IsDeleted = false,
                            OrderHeaderId = 5,
                            Price = 75.989999999999995,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 6,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4242),
                            IsDeleted = false,
                            OrderHeaderId = 6,
                            Price = 69.989999999999995,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 7,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4244),
                            IsDeleted = false,
                            OrderHeaderId = 7,
                            Price = 15.99,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 8,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4245),
                            IsDeleted = false,
                            OrderHeaderId = 8,
                            Price = 149.99000000000001,
                            ProductId = 13
                        },
                        new
                        {
                            Id = 9,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4246),
                            IsDeleted = false,
                            OrderHeaderId = 9,
                            Price = 149.99000000000001,
                            ProductId = 13
                        },
                        new
                        {
                            Id = 10,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4248),
                            IsDeleted = false,
                            OrderHeaderId = 9,
                            Price = 69.989999999999995,
                            ProductId = 12
                        },
                        new
                        {
                            Id = 11,
                            Count = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4249),
                            IsDeleted = false,
                            OrderHeaderId = 3,
                            Price = 899.99000000000001,
                            ProductId = 4
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Carrier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DeliveryMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeliveryStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("EstimatedDelivery")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("PaymentDueDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentIntentId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ShippingCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrackingUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderHeaders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountDue = 0.00m,
                            AmountPaid = 649.99m,
                            Carrier = "UPS",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(3194),
                            CustomerId = 1,
                            CustomerNotes = "Deliver to front porch",
                            DeliveryMethod = "Ground",
                            DeliveryStatus = "InTransit",
                            Discount = 13.00m,
                            EstimatedDelivery = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Shipped",
                            OrderTotal = 649.99m,
                            PaymentDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateOnly(2025, 4, 30),
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            ShippingCharges = 15.00m,
                            ShippingContactName = "John Doe",
                            ShippingContactPhone = "555-0101",
                            ShippingDate = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingMethod = "Standard",
                            Subtotal = 599.99m,
                            Tax = 48.00m,
                            TrackingNumber = "TRK123456"
                        },
                        new
                        {
                            Id = 2,
                            AmountDue = 129.59m,
                            AmountPaid = 0.00m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(3217),
                            CustomerId = 2,
                            DeliveryMethod = "Air",
                            DeliveryStatus = "Pending",
                            Discount = 0.00m,
                            EstimatedDelivery = new DateTime(2025, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderDate = new DateTime(2025, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            OrderTotal = 129.59m,
                            PaymentDueDate = new DateOnly(2025, 5, 2),
                            PaymentMethod = "PayPal",
                            PaymentStatus = "Pending",
                            ShippingCharges = 0.00m,
                            ShippingContactName = "Jane Smith",
                            ShippingContactPhone = "555-0102",
                            ShippingMethod = "Express",
                            Subtotal = 119.99m,
                            Tax = 9.60m
                        },
                        new
                        {
                            Id = 3,
                            AmountDue = 0.00m,
                            AmountPaid = 799.99m,
                            Carrier = "FedEx",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(3227),
                            CustomerId = 2,
                            CustomerNotes = "Leave at reception",
                            DeliveryMethod = "Ground",
                            DeliveryStatus = "Delivered",
                            Discount = 14.88m,
                            EstimatedDelivery = new DateTime(2025, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderDate = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Delivered",
                            OrderTotal = 799.99m,
                            PaymentDate = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateOnly(2025, 5, 3),
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            ShippingCharges = 20.00m,
                            ShippingContactName = "Hiroshi Tanaka",
                            ShippingContactPhone = "555-0103",
                            ShippingDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingMethod = "Standard",
                            Subtotal = 735.99m,
                            Tax = 58.88m,
                            TrackingNumber = "TRK789012"
                        },
                        new
                        {
                            Id = 4,
                            AmountDue = 0.00m,
                            AmountPaid = 108.00m,
                            Carrier = "DHL",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(3244),
                            CustomerId = 3,
                            DeliveryMethod = "Air",
                            DeliveryStatus = "InTransit",
                            Discount = 0.00m,
                            EstimatedDelivery = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderDate = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Shipped",
                            OrderTotal = 108.00m,
                            PaymentDate = new DateTime(2025, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateOnly(2025, 5, 4),
                            PaymentMethod = "DebitCard",
                            PaymentStatus = "Paid",
                            ShippingCharges = 0.00m,
                            ShippingContactName = "Emma Brown",
                            ShippingContactPhone = "555-0104",
                            ShippingDate = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingMethod = "Express",
                            Subtotal = 100.00m,
                            Tax = 8.00m,
                            TrackingNumber = "TRK345678"
                        },
                        new
                        {
                            Id = 5,
                            AmountDue = 75.60m,
                            AmountPaid = 0.00m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(3252),
                            CustomerId = 4,
                            CustomerNotes = "Fragile items",
                            DeliveryMethod = "Ground",
                            DeliveryStatus = "Pending",
                            Discount = 0.00m,
                            EstimatedDelivery = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            OrderTotal = 75.60m,
                            PaymentDueDate = new DateOnly(2025, 5, 5),
                            PaymentMethod = "PayPal",
                            PaymentStatus = "Pending",
                            ShippingCharges = 0.00m,
                            ShippingContactName = "Liam Johnson",
                            ShippingContactPhone = "555-0105",
                            ShippingMethod = "Standard",
                            Subtotal = 70.00m,
                            Tax = 5.60m
                        },
                        new
                        {
                            Id = 6,
                            AmountDue = 0.00m,
                            AmountPaid = 70.19m,
                            Carrier = "UPS",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(3270),
                            CustomerId = 4,
                            DeliveryMethod = "Ground",
                            DeliveryStatus = "InTransit",
                            Discount = 0.00m,
                            EstimatedDelivery = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderDate = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Shipped",
                            OrderTotal = 70.19m,
                            PaymentDate = new DateTime(2025, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateOnly(2025, 5, 6),
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Paid",
                            ShippingCharges = 0.00m,
                            ShippingContactName = "Sophie Martin",
                            ShippingContactPhone = "555-0106",
                            ShippingDate = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingMethod = "Standard",
                            Subtotal = 64.99m,
                            Tax = 5.20m,
                            TrackingNumber = "TRK901234"
                        },
                        new
                        {
                            Id = 7,
                            AmountDue = 0.00m,
                            AmountPaid = 16.19m,
                            Carrier = "FedEx",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(3278),
                            CustomerId = 4,
                            CustomerNotes = "Urgent delivery",
                            DeliveryMethod = "Air",
                            DeliveryStatus = "Delivered",
                            Discount = 0.00m,
                            EstimatedDelivery = new DateTime(2025, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderDate = new DateTime(2025, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Delivered",
                            OrderTotal = 16.19m,
                            PaymentDate = new DateTime(2025, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDueDate = new DateOnly(2025, 5, 7),
                            PaymentMethod = "DebitCard",
                            PaymentStatus = "Paid",
                            ShippingCharges = 0.00m,
                            ShippingContactName = "Arjun Patel",
                            ShippingContactPhone = "555-0107",
                            ShippingDate = new DateTime(2025, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ShippingMethod = "Express",
                            Subtotal = 14.99m,
                            Tax = 1.20m,
                            TrackingNumber = "TRK567890"
                        },
                        new
                        {
                            Id = 8,
                            AmountDue = 151.19m,
                            AmountPaid = 0.00m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(3286),
                            CustomerId = 5,
                            DeliveryMethod = "Ground",
                            DeliveryStatus = "Pending",
                            Discount = 0.00m,
                            EstimatedDelivery = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderDate = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            OrderTotal = 151.19m,
                            PaymentDueDate = new DateOnly(2025, 5, 8),
                            PaymentMethod = "CreditCard",
                            PaymentStatus = "Pending",
                            ShippingCharges = 0.00m,
                            ShippingContactName = "Clara Fischer",
                            ShippingContactPhone = "555-0108",
                            ShippingMethod = "Standard",
                            Subtotal = 139.99m,
                            Tax = 11.20m
                        },
                        new
                        {
                            Id = 9,
                            AmountDue = 151.19m,
                            AmountPaid = 0.00m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(3293),
                            CustomerId = 6,
                            CustomerNotes = "Gift wrap required",
                            DeliveryMethod = "Ground",
                            DeliveryStatus = "Pending",
                            Discount = 0.00m,
                            EstimatedDelivery = new DateTime(2025, 4, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            OrderDate = new DateTime(2025, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = "Processing",
                            OrderTotal = 151.19m,
                            PaymentDueDate = new DateOnly(2025, 5, 8),
                            PaymentMethod = "PayPal",
                            PaymentStatus = "Pending",
                            ShippingCharges = 0.00m,
                            ShippingContactName = "Clara Fischer",
                            ShippingContactPhone = "555-0109",
                            ShippingMethod = "Standard",
                            Subtotal = 139.99m,
                            Tax = 11.20m
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowBackorder")
                        .HasColumnType("bit");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DiscountEndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DiscountStartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("HeightInCm")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiscounted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewArrival")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrending")
                        .HasColumnType("bit");

                    b.Property<double>("LengthInCm")
                        .HasColumnType("float");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoldCount")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VendorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<double>("WeightInKg")
                        .HasColumnType("float");

                    b.Property<double>("WidthInCm")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowBackorder = false,
                            AverageRating = 4.7000000000000002,
                            Barcode = "789012345678",
                            BrandId = 1,
                            CategoryId = 10,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(890),
                            Description = "Immerse yourself in stunning visuals with this 55-inch 4K Ultra HD Smart TV. Featuring High Dynamic Range (HDR) for vibrant colors and deep contrast, built-in Wi-Fi, and access to all your favorite streaming apps. Enjoy a cinematic experience in the comfort of your living room.",
                            DiscountEndDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 649.99000000000001,
                            DiscountStartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 71.200000000000003,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = true,
                            IsNewArrival = false,
                            IsTrending = true,
                            LengthInCm = 8.3000000000000007,
                            MetaDescription = "Shop our 55-inch 4K UHD Smart TV with HDR technology for the ultimate home entertainment experience.",
                            MetaTitle = "55 inch 4K Smart TV | Tech Solutions",
                            Price = 699.99000000000001,
                            SKU = "ELC-SMTV-001",
                            ShortDescription = "55-inch 4K Smart TV with HDR and built-in streaming apps",
                            SoldCount = 120,
                            StockQuantity = 50,
                            Title = "Smart TV 55 inch 4K UHD with HDR",
                            TotalReviews = 85,
                            VendorId = "1",
                            Views = 2500,
                            WeightInKg = 15.5,
                            WidthInCm = 123.5
                        },
                        new
                        {
                            Id = 2,
                            AllowBackorder = true,
                            AverageRating = 4.5,
                            Barcode = "456789012345",
                            BrandId = 2,
                            CategoryId = 11,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(909),
                            Description = "Experience ultimate comfort with our premium 100% combed cotton men's t-shirt. Designed for a classic fit and exceptional softness, this navy blue tee is a versatile wardrobe staple perfect for everyday wear. Available in various sizes.",
                            DiscountEndDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 16.989999999999998,
                            DiscountStartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 70.0,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = false,
                            IsNewArrival = false,
                            IsTrending = false,
                            LengthInCm = 0.5,
                            MetaDescription = "Classic fit men's navy blue t-shirt made from 100% premium combed cotton for all-day comfort.",
                            MetaTitle = "Men's Premium Cotton T-Shirt | Fashion Forward",
                            Price = 20.0,
                            SKU = "APP-MTSRT-002-NVY",
                            ShortDescription = "Premium soft cotton t-shirt for men in navy blue",
                            SoldCount = 250,
                            StockQuantity = 100,
                            Title = "Premium Cotton T-Shirt - Mens (Navy Blue)",
                            TotalReviews = 120,
                            VendorId = "2",
                            Views = 1800,
                            WeightInKg = 0.20000000000000001,
                            WidthInCm = 50.0
                        },
                        new
                        {
                            Id = 3,
                            AllowBackorder = false,
                            AverageRating = 4.7999999999999998,
                            Barcode = "123456789012",
                            BrandId = 3,
                            CategoryId = 14,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(917),
                            Description = "Get your gardening tasks done with ease using our durable 3-piece garden tool set. Includes a sturdy trowel, hand fork, and cultivator, all featuring comfortable wooden handles for a secure grip. Perfect for both novice and experienced gardeners.",
                            DiscountPrice = 40.0,
                            HeightInCm = 30.0,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = false,
                            IsFeatured = false,
                            IsNewArrival = true,
                            IsTrending = false,
                            LengthInCm = 5.0,
                            MetaDescription = "High-quality 3-piece garden tool set with comfortable wooden handles for all your gardening needs.",
                            MetaTitle = "Essential Garden Tool Set | Green Living",
                            Price = 40.0,
                            SKU = "HGN-TLSET-003-WD",
                            ShortDescription = "3-piece garden tool set with wooden handles",
                            SoldCount = 45,
                            StockQuantity = 30,
                            Title = "Essential Garden Tool Set (3-Piece with Wooden Handles)",
                            TotalReviews = 28,
                            VendorId = "3",
                            Views = 950,
                            WeightInKg = 0.90000000000000002,
                            WidthInCm = 12.0
                        },
                        new
                        {
                            Id = 4,
                            AllowBackorder = false,
                            AverageRating = 4.5999999999999996,
                            Barcode = "567890123456",
                            BrandId = 1,
                            CategoryId = 9,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(922),
                            Description = "Experience lightning-fast performance with our ultra-slim 15.6-inch laptop. Featuring a powerful processor, 512GB SSD storage, and 16GB RAM for seamless multitasking. The vibrant Full HD display and long-lasting battery make it perfect for work and entertainment on the go.",
                            DiscountEndDate = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 899.99000000000001,
                            DiscountStartDate = new DateTime(2025, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 1.8,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = true,
                            IsNewArrival = true,
                            IsTrending = true,
                            LengthInCm = 24.199999999999999,
                            MetaDescription = "Powerful and portable 15.6-inch laptop with SSD storage for fast performance anywhere you go.",
                            MetaTitle = "Ultra-Slim 15.6\" Laptop | Tech Solutions",
                            Price = 999.99000000000001,
                            SKU = "ELC-LPTOP-004",
                            ShortDescription = "15.6\" ultra-slim laptop with SSD and powerful performance",
                            SoldCount = 85,
                            StockQuantity = 35,
                            Title = "Ultra-Slim Laptop 15.6\" with SSD",
                            TotalReviews = 62,
                            VendorId = "1",
                            Views = 3200,
                            WeightInKg = 1.8,
                            WidthInCm = 35.600000000000001
                        },
                        new
                        {
                            Id = 5,
                            AllowBackorder = false,
                            AverageRating = 4.7999999999999998,
                            Barcode = "345678901234",
                            BrandId = 2,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(927),
                            Description = "Add a touch of elegance to any outfit with our designer leather handbag. Crafted from premium genuine leather with a stylish gold-tone hardware and multiple interior compartments for organization. The adjustable shoulder strap and handle offer versatile carrying options.",
                            DiscountEndDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 129.99000000000001,
                            DiscountStartDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 25.0,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = true,
                            IsNewArrival = false,
                            IsTrending = true,
                            LengthInCm = 12.0,
                            MetaDescription = "Elegant black leather handbag with multiple compartments and versatile carrying options.",
                            MetaTitle = "Designer Black Leather Handbag | Fashion Forward",
                            Price = 149.99000000000001,
                            SKU = "APP-HBAG-005-BLK",
                            ShortDescription = "Premium black leather handbag with gold accents",
                            SoldCount = 68,
                            StockQuantity = 25,
                            Title = "Designer Leather Handbag - Women's (Black)",
                            TotalReviews = 45,
                            VendorId = "2",
                            Views = 1950,
                            WeightInKg = 0.80000000000000004,
                            WidthInCm = 35.0
                        },
                        new
                        {
                            Id = 6,
                            AllowBackorder = false,
                            AverageRating = 4.9000000000000004,
                            Barcode = "234567890123",
                            BrandId = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(934),
                            Description = "Capture life's special moments with exceptional clarity using our premium DSLR camera. Features a 24.1 megapixel CMOS sensor, 4K video recording, and includes a versatile 18-55mm lens. Perfect for both photography enthusiasts and those looking to elevate their photography skills.",
                            DiscountEndDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 799.99000000000001,
                            DiscountStartDate = new DateTime(2025, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 10.0,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = true,
                            IsNewArrival = false,
                            IsTrending = false,
                            LengthInCm = 7.7999999999999998,
                            MetaDescription = "Professional-grade DSLR camera with 24.1MP sensor and 4K video capability for stunning photos and videos.",
                            MetaTitle = "Premium DSLR Camera with Lens | Tech Solutions",
                            Price = 899.99000000000001,
                            SKU = "ELC-CAM-006",
                            ShortDescription = "24.1MP DSLR camera with 4K video and 18-55mm lens",
                            SoldCount = 42,
                            StockQuantity = 20,
                            Title = "Premium Digital SLR Camera with 18-55mm Lens",
                            TotalReviews = 36,
                            VendorId = "1",
                            Views = 1680,
                            WeightInKg = 0.69999999999999996,
                            WidthInCm = 12.9
                        },
                        new
                        {
                            Id = 7,
                            AllowBackorder = true,
                            AverageRating = 4.7000000000000002,
                            Barcode = "890123456789",
                            BrandId = 3,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(941),
                            Description = "Indulge in the refreshing taste of premium organic green tea with our curated gift set. Includes 6 distinct varieties of hand-picked green tea leaves packaged in elegant tins. Perfect for tea enthusiasts or as a thoughtful gift for special occasions.",
                            DiscountPrice = 45.0,
                            HeightInCm = 8.0,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = false,
                            IsFeatured = false,
                            IsNewArrival = true,
                            IsTrending = false,
                            LengthInCm = 20.0,
                            MetaDescription = "Premium selection of 6 organic green tea varieties presented in an elegant gift box.",
                            MetaTitle = "Organic Green Tea Gift Set | Green Living",
                            Price = 45.0,
                            SKU = "HGN-TEA-007",
                            ShortDescription = "Gift set of 6 premium organic green tea varieties",
                            SoldCount = 38,
                            StockQuantity = 40,
                            Title = "Organic Green Tea Gift Set (Variety Pack)",
                            TotalReviews = 22,
                            VendorId = "3",
                            Views = 890,
                            WeightInKg = 0.5,
                            WidthInCm = 25.0
                        },
                        new
                        {
                            Id = 8,
                            AllowBackorder = true,
                            AverageRating = 4.5,
                            Barcode = "901234567890",
                            BrandId = 4,
                            CategoryId = 15,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(946),
                            Description = "Journey back in time with this captivating historical fiction novel that uncovers the story of a lost dynasty. Set in the 16th century, the narrative weaves together adventure, romance, and political intrigue as a young scholar uncovers ancient secrets that could change the course of history.",
                            DiscountEndDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 15.99,
                            DiscountStartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 2.5,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = false,
                            IsNewArrival = true,
                            IsTrending = true,
                            LengthInCm = 22.800000000000001,
                            MetaDescription = "Immerse yourself in a captivating tale of secrets, adventure, and intrigue set in the 16th century.",
                            MetaTitle = "The Forgotten Dynasty | Historical Fiction",
                            Price = 18.989999999999998,
                            SKU = "BOK-HFIC-008",
                            ShortDescription = "Captivating historical fiction novel set in the 16th century",
                            SoldCount = 72,
                            StockQuantity = 60,
                            Title = "Historical Fiction: 'The Forgotten Dynasty'",
                            TotalReviews = 48,
                            VendorId = "4",
                            Views = 1250,
                            WeightInKg = 0.40000000000000002,
                            WidthInCm = 15.199999999999999
                        },
                        new
                        {
                            Id = 9,
                            AllowBackorder = false,
                            AverageRating = 4.7999999999999998,
                            Barcode = "012345678901",
                            BrandId = 5,
                            CategoryId = 17,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(951),
                            Description = "Conquer any trail with confidence in our all-weather hiking boots. Featuring waterproof construction, superior grip rubber soles, and cushioned insoles for all-day comfort. The breathable membrane keeps feet dry while allowing moisture to escape, making these perfect for year-round outdoor adventures.",
                            DiscountEndDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 109.95,
                            DiscountStartDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 15.0,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = false,
                            IsNewArrival = false,
                            IsTrending = true,
                            LengthInCm = 20.0,
                            MetaDescription = "Durable and waterproof hiking boots designed for maximum comfort on any terrain and in any weather.",
                            MetaTitle = "All-Weather Hiking Boots | Adventure Gear",
                            Price = 129.94999999999999,
                            SKU = "SPT-HBOOT-009",
                            ShortDescription = "Waterproof and comfortable hiking boots for all terrains",
                            SoldCount = 95,
                            StockQuantity = 45,
                            Title = "All-Weather Hiking Boots (Unisex)",
                            TotalReviews = 63,
                            VendorId = "5",
                            Views = 2100,
                            WeightInKg = 1.2,
                            WidthInCm = 30.0
                        },
                        new
                        {
                            Id = 10,
                            AllowBackorder = true,
                            AverageRating = 4.7000000000000002,
                            Barcode = "678901234567",
                            BrandId = 6,
                            CategoryId = 6,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(956),
                            Description = "Turn back the clock with our comprehensive anti-aging skincare collection. This five-piece set includes cleanser, toner, day cream with SPF 30, night serum, and eye cream, all formulated with powerful peptides, antioxidants, and hyaluronic acid to reduce fine lines and restore youthful radiance.",
                            DiscountEndDate = new DateTime(2025, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 75.989999999999995,
                            DiscountStartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 15.0,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = true,
                            IsNewArrival = true,
                            IsTrending = true,
                            LengthInCm = 8.0,
                            MetaDescription = "Complete 5-piece anti-aging skincare routine with powerful ingredients for visibly younger-looking skin.",
                            MetaTitle = "Anti-Aging Skincare Collection | Glow & Glam",
                            Price = 89.989999999999995,
                            SKU = "BPC-AAGE-010",
                            ShortDescription = "5-piece anti-aging skincare set with peptides and antioxidants",
                            SoldCount = 110,
                            StockQuantity = 30,
                            Title = "Anti-Aging Skincare Collection Set",
                            TotalReviews = 82,
                            VendorId = "6",
                            Views = 2800,
                            WeightInKg = 0.59999999999999998,
                            WidthInCm = 20.0
                        },
                        new
                        {
                            Id = 11,
                            AllowBackorder = false,
                            AverageRating = 4.9000000000000004,
                            Barcode = "789012345670",
                            BrandId = 7,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(962),
                            Description = "Spark your child's interest in STEM with our interactive learning robot. Programmable through an easy-to-use app, this friendly robot teaches coding concepts, plays educational games, and responds to voice commands. With multiple sensors and expandable capabilities, it grows with your child's skills.",
                            DiscountEndDate = new DateTime(2025, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 69.989999999999995,
                            DiscountStartDate = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 22.0,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = true,
                            IsNewArrival = true,
                            IsTrending = true,
                            LengthInCm = 12.0,
                            MetaDescription = "Educational robot that makes learning to code fun and engaging for children ages 6-12.",
                            MetaTitle = "Interactive Learning Robot for Kids | Fun Time Toys",
                            Price = 79.989999999999995,
                            SKU = "TOY-ROBOT-011",
                            ShortDescription = "Educational programmable robot that teaches coding to children",
                            SoldCount = 135,
                            StockQuantity = 25,
                            Title = "Interactive Learning Robot for Kids",
                            TotalReviews = 98,
                            VendorId = "7",
                            Views = 3500,
                            WeightInKg = 0.5,
                            WidthInCm = 15.0
                        },
                        new
                        {
                            Id = 12,
                            AllowBackorder = false,
                            AverageRating = 4.5999999999999996,
                            Barcode = "123456789013",
                            BrandId = 1,
                            CategoryId = 8,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(968),
                            Description = "Take your mobile videography to the next level with our 3-axis smartphone stabilizer gimbal. Featuring intelligent tracking, multiple shooting modes, and foldable design for easy portability. The rechargeable battery provides up to 12 hours of operation, perfect for content creators and travelers.",
                            DiscountEndDate = new DateTime(2025, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 69.989999999999995,
                            DiscountStartDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 19.0,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = false,
                            IsNewArrival = true,
                            IsTrending = false,
                            LengthInCm = 5.0,
                            MetaDescription = "Professional 3-axis gimbal stabilizer for smooth, cinematic smartphone videos.",
                            MetaTitle = "Smartphone Stabilizer Gimbal | Tech Solutions",
                            Price = 85.0,
                            SKU = "ELC-GIMB-012",
                            ShortDescription = "3-axis gimbal stabilizer for professional smartphone videos",
                            SoldCount = 58,
                            StockQuantity = 40,
                            Title = "Smartphone Stabilizer Gimbal",
                            TotalReviews = 42,
                            VendorId = "1",
                            Views = 1680,
                            WeightInKg = 0.40000000000000002,
                            WidthInCm = 12.0
                        },
                        new
                        {
                            Id = 13,
                            AllowBackorder = true,
                            AverageRating = 4.7999999999999998,
                            Barcode = "234567890124",
                            BrandId = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(974),
                            Description = "Transform your house into a smart home with our comprehensive starter kit. Includes a smart hub, two smart plugs, two motion sensors, and three smart light bulbs that can all be controlled via app or voice commands. Compatible with major voice assistants for seamless integration with your existing devices.",
                            DiscountEndDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrice = 149.99000000000001,
                            DiscountStartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HeightInCm = 25.0,
                            IsActive = true,
                            IsDeleted = false,
                            IsDiscounted = true,
                            IsFeatured = true,
                            IsNewArrival = true,
                            IsTrending = true,
                            LengthInCm = 15.0,
                            MetaDescription = "Complete solution to begin automating your home with smart devices controllable via app or voice.",
                            MetaTitle = "Smart Home Starter Kit | Tech Solutions",
                            Price = 179.99000000000001,
                            SKU = "ELC-SMHM-013",
                            ShortDescription = "Complete smart home kit with hub, plugs, sensors and bulbs",
                            SoldCount = 65,
                            StockQuantity = 20,
                            Title = "Smart Home Starter Kit",
                            TotalReviews = 38,
                            VendorId = "1",
                            Views = 2900,
                            WeightInKg = 1.2,
                            WidthInCm = 30.0
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1049),
                            ImageUrl = "/images/products/smarttv_main.jpg",
                            IsDeleted = false,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1052),
                            ImageUrl = "/images/products/smarttv_side.jpg",
                            IsDeleted = false,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1053),
                            ImageUrl = "/images/products/smarttv_ports.jpg",
                            IsDeleted = false,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1170),
                            ImageUrl = "/images/products/tshirt_navy_front.jpg",
                            IsDeleted = false,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1171),
                            ImageUrl = "/images/products/tshirt_navy_back.jpg",
                            IsDeleted = false,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1172),
                            ImageUrl = "/images/products/garden_tool_set.jpg",
                            IsDeleted = false,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1173),
                            ImageUrl = "/images/products/gardentool_trowel.jpg",
                            IsDeleted = false,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1174),
                            ImageUrl = "/images/products/gardentool_fork.jpg",
                            IsDeleted = false,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1175),
                            ImageUrl = "/images/products/laptop_main.jpg",
                            IsDeleted = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1176),
                            ImageUrl = "/images/products/laptop_open.jpg",
                            IsDeleted = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1177),
                            ImageUrl = "/images/products/laptop_side.jpg",
                            IsDeleted = false,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1179),
                            ImageUrl = "/images/products/handbag_black_main.jpg",
                            IsDeleted = false,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1181),
                            ImageUrl = "/images/products/handbag_black_open.jpg",
                            IsDeleted = false,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1182),
                            ImageUrl = "/images/products/camera_main.jpg",
                            IsDeleted = false,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1183),
                            ImageUrl = "/images/products/camera_top.jpg",
                            IsDeleted = false,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1184),
                            ImageUrl = "/images/products/camera_lens.jpg",
                            IsDeleted = false,
                            ProductId = 6
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1185),
                            ImageUrl = "/images/products/tea_set_complete.jpg",
                            IsDeleted = false,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1186),
                            ImageUrl = "/images/products/tea_tin_open.jpg",
                            IsDeleted = false,
                            ProductId = 7
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1187),
                            ImageUrl = "/images/products/book_cover.jpg",
                            IsDeleted = false,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1188),
                            ImageUrl = "/images/products/book_back.jpg",
                            IsDeleted = false,
                            ProductId = 8
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1189),
                            ImageUrl = "/images/products/hikingboots_pair.jpg",
                            IsDeleted = false,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1190),
                            ImageUrl = "/images/products/hikingboots_sole.jpg",
                            IsDeleted = false,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1191),
                            ImageUrl = "/images/products/hikingboots_side.jpg",
                            IsDeleted = false,
                            ProductId = 9
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1192),
                            ImageUrl = "/images/products/skincare_set.jpg",
                            IsDeleted = false,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1193),
                            ImageUrl = "/images/products/skincare_serum.jpg",
                            IsDeleted = false,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1194),
                            ImageUrl = "/images/products/skincare_cream.jpg",
                            IsDeleted = false,
                            ProductId = 10
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1195),
                            ImageUrl = "/images/products/robot_front.jpg",
                            IsDeleted = false,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1196),
                            ImageUrl = "/images/products/robot_side.jpg",
                            IsDeleted = false,
                            ProductId = 11
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1198),
                            ImageUrl = "/images/products/gimbal_main.jpg",
                            IsDeleted = false,
                            ProductId = 12
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1199),
                            ImageUrl = "/images/products/gimbal_folded.jpg",
                            IsDeleted = false,
                            ProductId = 12
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1200),
                            ImageUrl = "/images/products/smarthome_kit.jpg",
                            IsDeleted = false,
                            ProductId = 13
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1201),
                            ImageUrl = "/images/products/smarthome_hub.jpg",
                            IsDeleted = false,
                            ProductId = 13
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1202),
                            ImageUrl = "/images/products/smarthome_bulb.jpg",
                            IsDeleted = false,
                            ProductId = 13
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ProductSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSpecification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1293),
                            IsDeleted = false,
                            Key = "Screen Size",
                            ProductId = 1,
                            Value = "55 inches"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1295),
                            IsDeleted = false,
                            Key = "Resolution",
                            ProductId = 1,
                            Value = "4K Ultra HD (3840 x 2160)"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1297),
                            IsDeleted = false,
                            Key = "Display Technology",
                            ProductId = 1,
                            Value = "LED"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1298),
                            IsDeleted = false,
                            Key = "HDR",
                            ProductId = 1,
                            Value = "Yes"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1299),
                            IsDeleted = false,
                            Key = "Smart TV",
                            ProductId = 1,
                            Value = "Yes"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1302),
                            IsDeleted = false,
                            Key = "Connectivity",
                            ProductId = 1,
                            Value = "Wi-Fi, Bluetooth, HDMI, USB"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1303),
                            IsDeleted = false,
                            Key = "Material",
                            ProductId = 2,
                            Value = "100% Combed Cotton"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1304),
                            IsDeleted = false,
                            Key = "Color",
                            ProductId = 2,
                            Value = "Navy Blue"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1305),
                            IsDeleted = false,
                            Key = "Care Instructions",
                            ProductId = 2,
                            Value = "Machine wash cold, tumble dry low"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1306),
                            IsDeleted = false,
                            Key = "Material",
                            ProductId = 3,
                            Value = "Stainless Steel with Wooden Handles"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1307),
                            IsDeleted = false,
                            Key = "Pieces",
                            ProductId = 3,
                            Value = "3"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1309),
                            IsDeleted = false,
                            Key = "Tool Length",
                            ProductId = 3,
                            Value = "30 cm"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1310),
                            IsDeleted = false,
                            Key = "Processor",
                            ProductId = 4,
                            Value = "Intel Core i7"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1311),
                            IsDeleted = false,
                            Key = "RAM",
                            ProductId = 4,
                            Value = "16 GB"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1312),
                            IsDeleted = false,
                            Key = "Storage",
                            ProductId = 4,
                            Value = "512 GB SSD"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1313),
                            IsDeleted = false,
                            Key = "Display",
                            ProductId = 4,
                            Value = "15.6-inch Full HD (1920 x 1080)"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1315),
                            IsDeleted = false,
                            Key = "Battery Life",
                            ProductId = 4,
                            Value = "Up to 10 hours"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1316),
                            IsDeleted = false,
                            Key = "Operating System",
                            ProductId = 4,
                            Value = "Windows 11"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1317),
                            IsDeleted = false,
                            Key = "Material",
                            ProductId = 5,
                            Value = "Genuine Leather"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1318),
                            IsDeleted = false,
                            Key = "Color",
                            ProductId = 5,
                            Value = "Black"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1319),
                            IsDeleted = false,
                            Key = "Dimensions",
                            ProductId = 5,
                            Value = "35 x 25 x 12 cm"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1321),
                            IsDeleted = false,
                            Key = "Hardware",
                            ProductId = 5,
                            Value = "Gold-tone"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1322),
                            IsDeleted = false,
                            Key = "Megapixels",
                            ProductId = 6,
                            Value = "24.1 MP"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1323),
                            IsDeleted = false,
                            Key = "Sensor Type",
                            ProductId = 6,
                            Value = "CMOS"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1324),
                            IsDeleted = false,
                            Key = "Video Resolution",
                            ProductId = 6,
                            Value = "4K"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1326),
                            IsDeleted = false,
                            Key = "Lens",
                            ProductId = 6,
                            Value = "18-55mm"
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1327),
                            IsDeleted = false,
                            Key = "ISO Range",
                            ProductId = 6,
                            Value = "100-25600"
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1328),
                            IsDeleted = false,
                            Key = "Varieties",
                            ProductId = 7,
                            Value = "6"
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1329),
                            IsDeleted = false,
                            Key = "Organic",
                            ProductId = 7,
                            Value = "Yes"
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1406),
                            IsDeleted = false,
                            Key = "Weight",
                            ProductId = 7,
                            Value = "300g total (50g each)"
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1408),
                            IsDeleted = false,
                            Key = "Packaging",
                            ProductId = 7,
                            Value = "Metal tins in gift box"
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1410),
                            IsDeleted = false,
                            Key = "Format",
                            ProductId = 8,
                            Value = "Hardcover"
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1411),
                            IsDeleted = false,
                            Key = "Pages",
                            ProductId = 8,
                            Value = "384"
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1412),
                            IsDeleted = false,
                            Key = "Genre",
                            ProductId = 8,
                            Value = "Historical Fiction"
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1413),
                            IsDeleted = false,
                            Key = "Language",
                            ProductId = 8,
                            Value = "English"
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1414),
                            IsDeleted = false,
                            Key = "Material",
                            ProductId = 9,
                            Value = "Waterproof Leather and Mesh"
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1415),
                            IsDeleted = false,
                            Key = "Sole",
                            ProductId = 9,
                            Value = "Rubber with Multi-directional Traction"
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1416),
                            IsDeleted = false,
                            Key = "Closure",
                            ProductId = 9,
                            Value = "Lace-up"
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1418),
                            IsDeleted = false,
                            Key = "Gender",
                            ProductId = 9,
                            Value = "Unisex"
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1419),
                            IsDeleted = false,
                            Key = "Pieces",
                            ProductId = 10,
                            Value = "5"
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1420),
                            IsDeleted = false,
                            Key = "Skin Type",
                            ProductId = 10,
                            Value = "All"
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1421),
                            IsDeleted = false,
                            Key = "Key Ingredients",
                            ProductId = 10,
                            Value = "Peptides, Hyaluronic Acid, Antioxidants"
                        },
                        new
                        {
                            Id = 43,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1422),
                            IsDeleted = false,
                            Key = "SPF",
                            ProductId = 10,
                            Value = "30 (Day Cream)"
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1424),
                            IsDeleted = false,
                            Key = "Age Range",
                            ProductId = 11,
                            Value = "6-12 years"
                        },
                        new
                        {
                            Id = 45,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1425),
                            IsDeleted = false,
                            Key = "Programmable",
                            ProductId = 11,
                            Value = "Yes"
                        },
                        new
                        {
                            Id = 46,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1426),
                            IsDeleted = false,
                            Key = "Battery Life",
                            ProductId = 11,
                            Value = "4 hours"
                        },
                        new
                        {
                            Id = 47,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1427),
                            IsDeleted = false,
                            Key = "Connectivity",
                            ProductId = 11,
                            Value = "Bluetooth"
                        },
                        new
                        {
                            Id = 48,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1429),
                            IsDeleted = false,
                            Key = "App Compatibility",
                            ProductId = 11,
                            Value = "iOS and Android"
                        },
                        new
                        {
                            Id = 49,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1430),
                            IsDeleted = false,
                            Key = "Axes",
                            ProductId = 12,
                            Value = "3-axis"
                        },
                        new
                        {
                            Id = 50,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1431),
                            IsDeleted = false,
                            Key = "Battery Life",
                            ProductId = 12,
                            Value = "12 hours"
                        },
                        new
                        {
                            Id = 51,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1432),
                            IsDeleted = false,
                            Key = "Compatibility",
                            ProductId = 12,
                            Value = "Most smartphones up to 6.7 inches"
                        },
                        new
                        {
                            Id = 52,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1433),
                            IsDeleted = false,
                            Key = "Weight",
                            ProductId = 12,
                            Value = "400g"
                        },
                        new
                        {
                            Id = 53,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1434),
                            IsDeleted = false,
                            Key = "Components",
                            ProductId = 13,
                            Value = "1 Hub, 2 Plugs, 2 Sensors, 3 Bulbs"
                        },
                        new
                        {
                            Id = 54,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1436),
                            IsDeleted = false,
                            Key = "Connectivity",
                            ProductId = 13,
                            Value = "Wi-Fi, Bluetooth"
                        },
                        new
                        {
                            Id = 55,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1438),
                            IsDeleted = false,
                            Key = "Voice Assistant Compatibility",
                            ProductId = 13,
                            Value = "Alexa, Google Assistant, Siri"
                        },
                        new
                        {
                            Id = 56,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1439),
                            IsDeleted = false,
                            Key = "App Control",
                            ProductId = 13,
                            Value = "Yes"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1547),
                            IsDeleted = false,
                            ProductId = 1,
                            TagName = "4K"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1550),
                            IsDeleted = false,
                            ProductId = 1,
                            TagName = "Smart TV"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1551),
                            IsDeleted = false,
                            ProductId = 1,
                            TagName = "HDR"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1553),
                            IsDeleted = false,
                            ProductId = 1,
                            TagName = "Home Entertainment"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1554),
                            IsDeleted = false,
                            ProductId = 2,
                            TagName = "Men's Fashion"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1555),
                            IsDeleted = false,
                            ProductId = 2,
                            TagName = "Casual Wear"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1556),
                            IsDeleted = false,
                            ProductId = 2,
                            TagName = "Cotton"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1558),
                            IsDeleted = false,
                            ProductId = 3,
                            TagName = "Gardening"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1559),
                            IsDeleted = false,
                            ProductId = 3,
                            TagName = "Tools"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1560),
                            IsDeleted = false,
                            ProductId = 3,
                            TagName = "New Arrival"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1561),
                            IsDeleted = false,
                            ProductId = 4,
                            TagName = "Computing"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1562),
                            IsDeleted = false,
                            ProductId = 4,
                            TagName = "SSD"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1563),
                            IsDeleted = false,
                            ProductId = 4,
                            TagName = "Lightweight"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1564),
                            IsDeleted = false,
                            ProductId = 4,
                            TagName = "New Arrival"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1565),
                            IsDeleted = false,
                            ProductId = 5,
                            TagName = "Women's Fashion"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1566),
                            IsDeleted = false,
                            ProductId = 5,
                            TagName = "Leather"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1567),
                            IsDeleted = false,
                            ProductId = 5,
                            TagName = "Designer"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1568),
                            IsDeleted = false,
                            ProductId = 5,
                            TagName = "Trending"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1569),
                            IsDeleted = false,
                            ProductId = 6,
                            TagName = "Photography"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1571),
                            IsDeleted = false,
                            ProductId = 6,
                            TagName = "4K Video"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1572),
                            IsDeleted = false,
                            ProductId = 6,
                            TagName = "Featured"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1573),
                            IsDeleted = false,
                            ProductId = 7,
                            TagName = "Organic"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1574),
                            IsDeleted = false,
                            ProductId = 7,
                            TagName = "Gift Set"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1575),
                            IsDeleted = false,
                            ProductId = 7,
                            TagName = "New Arrival"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1576),
                            IsDeleted = false,
                            ProductId = 8,
                            TagName = "Historical Fiction"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1577),
                            IsDeleted = false,
                            ProductId = 8,
                            TagName = "Bestseller"
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1579),
                            IsDeleted = false,
                            ProductId = 8,
                            TagName = "New Arrival"
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1580),
                            IsDeleted = false,
                            ProductId = 9,
                            TagName = "Outdoor"
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1581),
                            IsDeleted = false,
                            ProductId = 9,
                            TagName = "Waterproof"
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1582),
                            IsDeleted = false,
                            ProductId = 9,
                            TagName = "Unisex"
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1584),
                            IsDeleted = false,
                            ProductId = 9,
                            TagName = "Trending"
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1585),
                            IsDeleted = false,
                            ProductId = 10,
                            TagName = "Anti-Aging"
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1586),
                            IsDeleted = false,
                            ProductId = 10,
                            TagName = "Beauty"
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1664),
                            IsDeleted = false,
                            ProductId = 10,
                            TagName = "New Arrival"
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1666),
                            IsDeleted = false,
                            ProductId = 10,
                            TagName = "Trending"
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1667),
                            IsDeleted = false,
                            ProductId = 11,
                            TagName = "Educational"
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1668),
                            IsDeleted = false,
                            ProductId = 11,
                            TagName = "STEM"
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1669),
                            IsDeleted = false,
                            ProductId = 11,
                            TagName = "Kids"
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1670),
                            IsDeleted = false,
                            ProductId = 11,
                            TagName = "New Arrival"
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1671),
                            IsDeleted = false,
                            ProductId = 12,
                            TagName = "Photography"
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1672),
                            IsDeleted = false,
                            ProductId = 12,
                            TagName = "Accessories"
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1673),
                            IsDeleted = false,
                            ProductId = 12,
                            TagName = "New Arrival"
                        },
                        new
                        {
                            Id = 43,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1674),
                            IsDeleted = false,
                            ProductId = 13,
                            TagName = "Smart Home"
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1675),
                            IsDeleted = false,
                            ProductId = 13,
                            TagName = "IoT"
                        },
                        new
                        {
                            Id = 45,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1676),
                            IsDeleted = false,
                            ProductId = 13,
                            TagName = "New Arrival"
                        },
                        new
                        {
                            Id = 46,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1677),
                            IsDeleted = false,
                            ProductId = 13,
                            TagName = "Trending"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1783),
                            DiscountPrice = 16.989999999999998,
                            IsDeleted = false,
                            Price = 20.0,
                            ProductId = 2,
                            SKU = "APP-MTSRT-002-NVY-S",
                            StockQuantity = 25,
                            VariantName = "Size - S"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1791),
                            DiscountPrice = 16.989999999999998,
                            IsDeleted = false,
                            Price = 20.0,
                            ProductId = 2,
                            SKU = "APP-MTSRT-002-NVY-M",
                            StockQuantity = 30,
                            VariantName = "Size - M"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1793),
                            DiscountPrice = 16.989999999999998,
                            IsDeleted = false,
                            Price = 20.0,
                            ProductId = 2,
                            SKU = "APP-MTSRT-002-NVY-L",
                            StockQuantity = 25,
                            VariantName = "Size - L"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1795),
                            DiscountPrice = 18.989999999999998,
                            IsDeleted = false,
                            Price = 22.0,
                            ProductId = 2,
                            SKU = "APP-MTSRT-002-NVY-XL",
                            StockQuantity = 20,
                            VariantName = "Size - XL"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1801),
                            DiscountPrice = 129.99000000000001,
                            IsDeleted = false,
                            Price = 149.99000000000001,
                            ProductId = 5,
                            SKU = "APP-HBAG-005-BLK",
                            StockQuantity = 15,
                            VariantName = "Color - Black"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1802),
                            DiscountPrice = 129.99000000000001,
                            IsDeleted = false,
                            Price = 149.99000000000001,
                            ProductId = 5,
                            SKU = "APP-HBAG-005-BRN",
                            StockQuantity = 10,
                            VariantName = "Color - Brown"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1804),
                            DiscountPrice = 109.95,
                            IsDeleted = false,
                            Price = 129.94999999999999,
                            ProductId = 9,
                            SKU = "SPT-HBOOT-009-07",
                            StockQuantity = 8,
                            VariantName = "Size - US 7 / EU 38"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1806),
                            DiscountPrice = 109.95,
                            IsDeleted = false,
                            Price = 129.94999999999999,
                            ProductId = 9,
                            SKU = "SPT-HBOOT-009-08",
                            StockQuantity = 10,
                            VariantName = "Size - US 8 / EU 39"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1807),
                            DiscountPrice = 109.95,
                            IsDeleted = false,
                            Price = 129.94999999999999,
                            ProductId = 9,
                            SKU = "SPT-HBOOT-009-09",
                            StockQuantity = 12,
                            VariantName = "Size - US 9 / EU 40"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1809),
                            DiscountPrice = 109.95,
                            IsDeleted = false,
                            Price = 129.94999999999999,
                            ProductId = 9,
                            SKU = "SPT-HBOOT-009-10",
                            StockQuantity = 10,
                            VariantName = "Size - US 10 / EU 41"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1811),
                            DiscountPrice = 109.95,
                            IsDeleted = false,
                            Price = 129.94999999999999,
                            ProductId = 9,
                            SKU = "SPT-HBOOT-009-11",
                            StockQuantity = 5,
                            VariantName = "Size - US 11 / EU 42"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1812),
                            DiscountPrice = 649.99000000000001,
                            IsDeleted = false,
                            Price = 699.99000000000001,
                            ProductId = 1,
                            SKU = "ELC-SMTV-001-55",
                            StockQuantity = 30,
                            VariantName = "Size - 55 inch"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1814),
                            DiscountPrice = 849.99000000000001,
                            IsDeleted = false,
                            Price = 899.99000000000001,
                            ProductId = 1,
                            SKU = "ELC-SMTV-001-65",
                            StockQuantity = 20,
                            VariantName = "Size - 65 inch"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1816),
                            DiscountPrice = 899.99000000000001,
                            IsDeleted = false,
                            Price = 999.99000000000001,
                            ProductId = 4,
                            SKU = "ELC-LPTOP-004-16-512",
                            StockQuantity = 20,
                            VariantName = "RAM - 16GB / Storage - 512GB"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1817),
                            DiscountPrice = 1199.99,
                            IsDeleted = false,
                            Price = 1299.99,
                            ProductId = 4,
                            SKU = "ELC-LPTOP-004-32-1TB",
                            StockQuantity = 15,
                            VariantName = "RAM - 32GB / Storage - 1TB"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1819),
                            DiscountPrice = 75.989999999999995,
                            IsDeleted = false,
                            Price = 89.989999999999995,
                            ProductId = 10,
                            SKU = "BPC-AAGE-010-NORM",
                            StockQuantity = 15,
                            VariantName = "For Normal Skin"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1821),
                            DiscountPrice = 75.989999999999995,
                            IsDeleted = false,
                            Price = 89.989999999999995,
                            ProductId = 10,
                            SKU = "BPC-AAGE-010-DRY",
                            StockQuantity = 10,
                            VariantName = "For Dry Skin"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1823),
                            DiscountPrice = 79.989999999999995,
                            IsDeleted = false,
                            Price = 94.989999999999995,
                            ProductId = 10,
                            SKU = "BPC-AAGE-010-SENS",
                            StockQuantity = 5,
                            VariantName = "For Sensitive Skin"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.TaxDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("TaxDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 52.00m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4773),
                            InvoiceId = 1,
                            IsDeleted = false,
                            Rate = 8.00m,
                            TaxType = "VAT"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 10.40m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4777),
                            InvoiceId = 2,
                            IsDeleted = false,
                            Rate = 8.00m,
                            TaxType = "GST"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 64.00m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4779),
                            InvoiceId = 3,
                            IsDeleted = false,
                            Rate = 8.00m,
                            TaxType = "Consumption Tax"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 8.80m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4780),
                            InvoiceId = 4,
                            IsDeleted = false,
                            Rate = 8.00m,
                            TaxType = "GST"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 6.08m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4782),
                            InvoiceId = 5,
                            IsDeleted = false,
                            Rate = 8.00m,
                            TaxType = "VAT"
                        },
                        new
                        {
                            Id = 6,
                            Amount = 5.60m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4783),
                            InvoiceId = 6,
                            IsDeleted = false,
                            Rate = 8.00m,
                            TaxType = "GST"
                        },
                        new
                        {
                            Id = 7,
                            Amount = -1.28m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4785),
                            InvoiceId = 7,
                            IsDeleted = false,
                            Rate = 8.00m,
                            TaxType = "VAT"
                        },
                        new
                        {
                            Id = 8,
                            Amount = 12.00m,
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(4787),
                            InvoiceId = 8,
                            IsDeleted = false,
                            Rate = 8.00m,
                            TaxType = "VAT"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Timezone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UtcOffset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtcOffsetString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Timezones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "EST",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1973),
                            IsDeleted = false,
                            Name = "America/New_York",
                            UtcOffset = "-05:00",
                            UtcOffsetString = "EST"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "GMT",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1975),
                            IsDeleted = false,
                            Name = "Europe/London",
                            UtcOffset = "+00:00",
                            UtcOffsetString = "GMT"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "JST",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1977),
                            IsDeleted = false,
                            Name = "Asia/Tokyo",
                            UtcOffset = "+09:00",
                            UtcOffsetString = "JST"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "AEDT",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1978),
                            IsDeleted = false,
                            Name = "Australia/Sydney",
                            UtcOffset = "+10:00",
                            UtcOffsetString = "AEDT"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "EST",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1980),
                            IsDeleted = false,
                            Name = "America/Toronto",
                            UtcOffset = "-05:00",
                            UtcOffsetString = "EST"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "CET",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(1981),
                            IsDeleted = false,
                            Name = "Europe/Paris",
                            UtcOffset = "+01:00",
                            UtcOffsetString = "CET"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "IST",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2062),
                            IsDeleted = false,
                            Name = "Asia/Mumbai",
                            UtcOffset = "+05:30",
                            UtcOffsetString = "IST"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "CET",
                            CreatedDate = new DateTime(2025, 5, 16, 14, 0, 20, 731, DateTimeKind.Utc).AddTicks(2063),
                            IsDeleted = false,
                            Name = "Europe/Zurich",
                            UtcOffset = "+01:00",
                            UtcOffsetString = "CET"
                        });
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted", "DeletedDate")
                        .HasDatabaseName("IX_AspNetUsers_IsDeleted_DeletedDate")
                        .HasFilter("IsDeleted = 1");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Category", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Customer", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ECommerceCore.Domain.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("int");

                            b1.Property<string>("Address1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address1");

                            b1.Property<string>("Address2")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address2");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("State");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");

                            b1.HasData(
                                new
                                {
                                    CustomerId = 1,
                                    Address1 = "123 Maple St",
                                    Address2 = "Apt 4B",
                                    City = "Springfield",
                                    Country = "USA",
                                    State = "IL",
                                    ZipCode = "62701"
                                },
                                new
                                {
                                    CustomerId = 2,
                                    Address1 = "456 Oak Ave",
                                    Address2 = "Suite 201",
                                    City = "London",
                                    Country = "UK",
                                    State = "Greater London",
                                    ZipCode = "SW1A 1AA"
                                },
                                new
                                {
                                    CustomerId = 3,
                                    Address1 = "789 Sakura St",
                                    Address2 = "2 Chome-1-1",
                                    City = "Tokyo",
                                    Country = "Japan",
                                    State = "Tokyo",
                                    ZipCode = "100-0001"
                                },
                                new
                                {
                                    CustomerId = 4,
                                    Address1 = "101 Pine Rd",
                                    Address2 = "Level 5",
                                    City = "Sydney",
                                    Country = "Australia",
                                    State = "NSW",
                                    ZipCode = "2000"
                                },
                                new
                                {
                                    CustomerId = 5,
                                    Address1 = "202 Birch Ln",
                                    Address2 = "Unit 12",
                                    City = "Toronto",
                                    Country = "Canada",
                                    State = "ON",
                                    ZipCode = "M5V 2T7"
                                },
                                new
                                {
                                    CustomerId = 6,
                                    Address1 = "303 Cedar St",
                                    Address2 = "Batiment C",
                                    City = "Paris",
                                    Country = "France",
                                    State = "Île-de-France",
                                    ZipCode = "75001"
                                },
                                new
                                {
                                    CustomerId = 7,
                                    Address1 = "404 Elm Dr",
                                    Address2 = "Near Main Gate",
                                    City = "Mumbai",
                                    Country = "India",
                                    State = "MH",
                                    ZipCode = "400001"
                                },
                                new
                                {
                                    CustomerId = 8,
                                    Address1 = "505 Spruce Ct",
                                    Address2 = "Block A",
                                    City = "Zurich",
                                    Country = "Switzerland",
                                    State = "Zurich",
                                    ZipCode = "8001"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceCore.Domain.Entities.Company", null)
                        .WithMany("Invoices")
                        .HasForeignKey("CompanyId1");

                    b.HasOne("ECommerceCore.Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceCore.Domain.Entities.Location", "Location")
                        .WithMany("Invoices")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceCore.Domain.Entities.OrderHeader", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Location");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.InvoiceAttachments", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceAttachments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Location", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceCore.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceCore.Domain.Entities.Timezone", "Timezone")
                        .WithMany()
                        .HasForeignKey("TimezoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("ECommerceCore.Domain.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("LocationId")
                                .HasColumnType("int");

                            b1.Property<string>("Address1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address1");

                            b1.Property<string>("Address2")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address2");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Country");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("State");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("LocationId");

                            b1.ToTable("Locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");

                            b1.HasData(
                                new
                                {
                                    LocationId = 1,
                                    Address1 = "123 Innovation Way",
                                    Address2 = "Tech Park, Suite 100",
                                    City = "Silicon City",
                                    Country = "USA",
                                    State = "CA",
                                    ZipCode = "94016"
                                },
                                new
                                {
                                    LocationId = 2,
                                    Address1 = "456 Style Avenue",
                                    Address2 = "Fashion Mall, Unit 22",
                                    City = "Fashionville",
                                    Country = "USA",
                                    State = "NY",
                                    ZipCode = "10001"
                                },
                                new
                                {
                                    LocationId = 3,
                                    Address1 = "789 Earth Street",
                                    Address2 = "Industrial Zone, Gate 5",
                                    City = "Eco City",
                                    Country = "USA",
                                    State = "GA",
                                    ZipCode = "30303"
                                },
                                new
                                {
                                    LocationId = 4,
                                    Address1 = "101 Literary Lane",
                                    Address2 = "Off Charing Cross Rd",
                                    City = "London",
                                    Country = "UK",
                                    State = "London",
                                    ZipCode = "WC1B 3PA"
                                },
                                new
                                {
                                    LocationId = 5,
                                    Address1 = "222 Trail Road",
                                    Address2 = "Near Blue Mountains Entry",
                                    City = "Sydney",
                                    Country = "Australia",
                                    State = "NSW",
                                    ZipCode = "2000"
                                },
                                new
                                {
                                    LocationId = 6,
                                    Address1 = "333 Radiant Road",
                                    Address2 = "Galerie Vivienne",
                                    City = "Paris",
                                    Country = "France",
                                    State = "Paris",
                                    ZipCode = "75002"
                                },
                                new
                                {
                                    LocationId = 7,
                                    Address1 = "444 Playful Place",
                                    Address2 = "Linking Road, Bandra",
                                    City = "Mumbai",
                                    Country = "India",
                                    State = "MH",
                                    ZipCode = "400002"
                                },
                                new
                                {
                                    LocationId = 8,
                                    Address1 = "555 Tech Park",
                                    Address2 = "Innovation Center, Floor 3",
                                    City = "Zurich",
                                    Country = "Switzerland",
                                    State = "",
                                    ZipCode = "8002"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Currency");

                    b.Navigation("Timezone");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.OrderActivityLog", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.OrderHeader", null)
                        .WithMany("OrderActivityLog")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceCore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.OrderHeader", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ECommerceCore.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("ECommerceCore.Domain.Entities.BillingAddress", "BillToAddress", b1 =>
                        {
                            b1.Property<int>("OrderHeaderId")
                                .HasColumnType("int");

                            b1.Property<string>("BillingAddress1")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BillingAddress1");

                            b1.Property<string>("BillingAddress2")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BillingAddress2");

                            b1.Property<string>("BillingCity")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("BillingCity");

                            b1.Property<string>("BillingCountry")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("BillingCountry");

                            b1.Property<string>("BillingState")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("BillingState");

                            b1.Property<string>("BillingZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("BillingZipCode");

                            b1.HasKey("OrderHeaderId");

                            b1.ToTable("OrderHeaders");

                            b1.WithOwner()
                                .HasForeignKey("OrderHeaderId");

                            b1.HasData(
                                new
                                {
                                    OrderHeaderId = 1,
                                    BillingAddress1 = "123 Maple St",
                                    BillingAddress2 = "Suite 100",
                                    BillingCity = "Springfield",
                                    BillingCountry = "USA",
                                    BillingState = "IL",
                                    BillingZipCode = "94016"
                                },
                                new
                                {
                                    OrderHeaderId = 2,
                                    BillingAddress1 = "456 Style Avenue",
                                    BillingAddress2 = "Oak Ave",
                                    BillingCity = "London",
                                    BillingCountry = "USA",
                                    BillingState = "NY",
                                    BillingZipCode = "10001"
                                },
                                new
                                {
                                    OrderHeaderId = 3,
                                    BillingAddress1 = "789 Earth Street",
                                    BillingAddress2 = "Industrial Zone Ave ",
                                    BillingCity = "Eco City",
                                    BillingCountry = "USA",
                                    BillingState = "GA",
                                    BillingZipCode = "30303"
                                },
                                new
                                {
                                    OrderHeaderId = 4,
                                    BillingAddress1 = "101 Literary Lane",
                                    BillingAddress2 = "Off Charing Cross Rd",
                                    BillingCity = "London",
                                    BillingCountry = "UK",
                                    BillingState = "London",
                                    BillingZipCode = "WC1B 3PA"
                                },
                                new
                                {
                                    OrderHeaderId = 5,
                                    BillingAddress1 = "222 Trail Road",
                                    BillingAddress2 = "Near Blue Mountains Entry",
                                    BillingCity = "Sydney",
                                    BillingCountry = "Australia",
                                    BillingState = "NSW",
                                    BillingZipCode = "2000"
                                },
                                new
                                {
                                    OrderHeaderId = 6,
                                    BillingAddress1 = "333 Radiant Road",
                                    BillingAddress2 = "Galerie Vivienne",
                                    BillingCity = "Paris",
                                    BillingCountry = "France",
                                    BillingState = "Paris",
                                    BillingZipCode = "75002"
                                },
                                new
                                {
                                    OrderHeaderId = 7,
                                    BillingAddress1 = "444 Playful Place",
                                    BillingAddress2 = "Linking Road, Bandra",
                                    BillingCity = "Mumbai",
                                    BillingCountry = "India",
                                    BillingState = "MH",
                                    BillingZipCode = "400002"
                                },
                                new
                                {
                                    OrderHeaderId = 8,
                                    BillingAddress1 = "555 Tech Park",
                                    BillingAddress2 = "Innovation Center, Floor 3",
                                    BillingCity = "Zurich",
                                    BillingCountry = "Switzerland",
                                    BillingState = "",
                                    BillingZipCode = "8002"
                                },
                                new
                                {
                                    OrderHeaderId = 9,
                                    BillingAddress1 = "777 Skyline Boulevard",
                                    BillingAddress2 = "Sky Tower, Apt 905",
                                    BillingCity = "Toronto",
                                    BillingCountry = "Canada",
                                    BillingState = "ON",
                                    BillingZipCode = "M5V 2T6"
                                });
                        });

                    b.OwnsOne("ECommerceCore.Domain.Entities.ShippingAddress", "ShipToAddress", b1 =>
                        {
                            b1.Property<int>("OrderHeaderId")
                                .HasColumnType("int");

                            b1.Property<string>("ShippingAddress1")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ShippingAddress1");

                            b1.Property<string>("ShippingAddress2")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ShippingAddress2");

                            b1.Property<string>("ShippingCity")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ShippingCity");

                            b1.Property<string>("ShippingCountry")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ShippingCountry");

                            b1.Property<string>("ShippingState")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ShippingState");

                            b1.Property<string>("ShippingZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("ShippingZipCode");

                            b1.HasKey("OrderHeaderId");

                            b1.ToTable("OrderHeaders");

                            b1.WithOwner()
                                .HasForeignKey("OrderHeaderId");

                            b1.HasData(
                                new
                                {
                                    OrderHeaderId = 1,
                                    ShippingAddress1 = "123 Maple St",
                                    ShippingAddress2 = "Suite 100",
                                    ShippingCity = "Springfield",
                                    ShippingCountry = "USA",
                                    ShippingState = "IL",
                                    ShippingZipCode = "94016"
                                },
                                new
                                {
                                    OrderHeaderId = 2,
                                    ShippingAddress1 = "456 Style Avenue",
                                    ShippingAddress2 = "Oak Ave",
                                    ShippingCity = "London",
                                    ShippingCountry = "USA",
                                    ShippingState = "NY",
                                    ShippingZipCode = "10001"
                                },
                                new
                                {
                                    OrderHeaderId = 3,
                                    ShippingAddress1 = "789 Earth Street",
                                    ShippingAddress2 = "Industrial Zone Ave ",
                                    ShippingCity = "Eco City",
                                    ShippingCountry = "USA",
                                    ShippingState = "GA",
                                    ShippingZipCode = "30303"
                                },
                                new
                                {
                                    OrderHeaderId = 4,
                                    ShippingAddress1 = "101 Literary Lane",
                                    ShippingAddress2 = "Off Charing Cross Rd",
                                    ShippingCity = "London",
                                    ShippingCountry = "UK",
                                    ShippingState = "London",
                                    ShippingZipCode = "WC1B 3PA"
                                },
                                new
                                {
                                    OrderHeaderId = 5,
                                    ShippingAddress1 = "222 Trail Road",
                                    ShippingAddress2 = "Near Blue Mountains Entry",
                                    ShippingCity = "Sydney",
                                    ShippingCountry = "Australia",
                                    ShippingState = "NSW",
                                    ShippingZipCode = "2000"
                                },
                                new
                                {
                                    OrderHeaderId = 6,
                                    ShippingAddress1 = "333 Radiant Road",
                                    ShippingAddress2 = "Galerie Vivienne",
                                    ShippingCity = "Paris",
                                    ShippingCountry = "France",
                                    ShippingState = "Paris",
                                    ShippingZipCode = "75002"
                                },
                                new
                                {
                                    OrderHeaderId = 7,
                                    ShippingAddress1 = "444 Playful Place",
                                    ShippingAddress2 = "Linking Road, Bandra",
                                    ShippingCity = "Mumbai",
                                    ShippingCountry = "India",
                                    ShippingState = "MH",
                                    ShippingZipCode = "400002"
                                },
                                new
                                {
                                    OrderHeaderId = 8,
                                    ShippingAddress1 = "555 Tech Park",
                                    ShippingAddress2 = "Innovation Center, Floor 3",
                                    ShippingCity = "Zurich",
                                    ShippingCountry = "Switzerland",
                                    ShippingState = "",
                                    ShippingZipCode = "8002"
                                },
                                new
                                {
                                    OrderHeaderId = 9,
                                    ShippingAddress1 = "777 Skyline Boulevard",
                                    ShippingAddress2 = "Sky Tower, Apt 905",
                                    ShippingCity = "Toronto",
                                    ShippingCountry = "Canada",
                                    ShippingState = "ON",
                                    ShippingZipCode = "M5V 2T6"
                                });
                        });

                    b.Navigation("ApplicationUser");

                    b.Navigation("BillToAddress")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ShipToAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Product", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommerceCore.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ProductSpecification", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Product", "Product")
                        .WithMany("Specifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ProductTag", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Product", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ECommerceCore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.TaxDetail", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Invoice", "Invoice")
                        .WithMany("TaxDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.WishlistItem", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceCore.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("ECommerceCore.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Company", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceAttachments");

                    b.Navigation("InvoiceItems");

                    b.Navigation("TaxDetails");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Location", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.OrderHeader", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderActivityLog");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ECommerceCore.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("Specifications");

                    b.Navigation("Tags");

                    b.Navigation("Variants");
                });
#pragma warning restore 612, 618
        }
    }
}
